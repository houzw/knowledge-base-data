[
  {
    "name": "gdaldem hillshade",
    "exec": "gdaldem hillshade",
    "summary": "Tools to analyze and visualize DEMs. The  gdaldem  generally assumes that x, y and z units are identical.\nIf x (east-west) and y (north-south) units are identical, but z (elevation)\nunits are different, the scale (-s) option can be used to set the ratio of\nvertical units to horizontal.\nFor LatLong projections near the equator, where units of latitude and units of\nlongitude are similar, elevation (z) units can be converted to be compatible\nby using scale=370400 (if elevation is in feet) or scale=111120 (if elevation is in\nmeters).  For locations not near the equator, it would be best to reproject your\ngrid using gdalwarp before using gdaldem. The following general options are available:",
    "description": "Generate a shaded relief map from any GDAL-supported elevation raster. This command outputs an 8-bit raster with a nice shaded relief effect. It’s very useful for visualizing the terrain. You can optionally specify the azimuth and altitude of the light source, a vertical exaggeration factor and a scaling factor to account for differences between vertical and horizontal units.\n\nThe value 0 is used as the output nodata value.",
    "comment": "For all algorithms, except color-relief, a nodata value in the target dataset will be emitted if at least one pixel set to the nodata value is found in the 3x3 window centered around each source pixel. The consequence is that there will be a 1-pixel border around each image set with nodata value.",
    "syntax": "gdaldem hillshade input_dem output_hillshade [-z ZFactor ( default=1 )] [-s scale * ( default=1 )] [-az Azimuth ( default=315 )] [-alt Altitude ( default=45 )] [-alg ZevenbergenThorne] [-combined | -multidirectional | -igor] [-compute_edges] [-b Band ( default=1 )] [-of format] [-co \"NAME=VALUE\"] * [-q]",
    "parameters": [
      {
        "flag": null,
        "dataType": "Raster",
        "isOptional": false,
        "name": "input_dem",
        "isInputFile": true,
        "explanation": "The input DEM raster to be processed \n"
      },
      {
        "flag": null,
        "dataType": "Raster",
        "isOptional": false,
        "name": "output_hillshade",
        "isOutputFile": true,
        "explanation": "The output raster produced \n"
      }
    ],
    "options": [
      {
        "flag": "-compute_edges",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "compute_edges",
        "explanation": "Do the computation at raster edges and near nodata values. \n If -compute_edges is specified, gdaldem will compute values at image edges or if a nodata value is found in the 3x3 window, by interpolating missing values."
      },
      {
        "flag": "alg",
        "dataType": "String",
        "isOptional": true,
        "name": "zevenbergenthorne",
        "explanation": "Use Zevenbergen & Thorne formula, instead of Horn\u2019s formula, to compute slope & aspect. The literature suggests Zevenbergen & Thorne to be more suited to smooth landscapes, whereas Horn\u2019s formula to perform better on rougher terrain. \n"
      },
      {
        "flag": "-of",
        "dataType": "String",
        "defaultValue": "GeoTIFF",
        "isOptional": true,
        "name": "format",
        "explanation": "Select the output format. \n \n New in version 2.3.0:  If not specified, the format is guessed from the extension\n(previously was  GTiff \u2013 GeoTIFF File Format ). Use the short format name. \n \n"
      },
      {
        "flag": "-b",
        "dataType": "Integer",
        "isOptional": true,
        "defaultValue": 1,
        "name": "band",
        "explanation": "Select an input band to be processed. Bands are numbered from 1. \n"
      },
      {
        "flag": "-co",
        "dataType": "String",
        "input_pattern": "<NAME=VALUE>",
        "isOptional": true,
        "name": "co",
        "explanation": "Many formats have one or more optional creation options that can be\nused to control particulars about the file created. For instance,\nthe GeoTIFF driver supports creation options to control compression,\nand whether the file should be tiled. \n The creation options available vary by format driver, and some\nsimple formats have no creation options at all. A list of options\nsupported for a format can be listed with the\n \u2013formats \ncommand line option but the documentation for the format is the\ndefinitive source of information on driver creation options.\nSee  Raster drivers  format\nspecific documentation for legal creation options for each format. \n"
      },
      {
        "flag": "-q",
        "dataType": "Boolean",
        "isOptional": true,
        "defaultValue": true,
        "name": "q",
        "explanation": "Suppress progress monitor and other non-error output. \n"
      },
      {
        "flag": "-z",
        "dataType": "Float",
        "isOptional": true,
        "defaultValue": 1,
        "name": "zfactor",
        "explanation": "Vertical exaggeration used to pre-multiply the elevations"
      },
      {
        "flag": "-s",
        "dataType": "Float",
        "isOptional": true,
        "defaultValue": 1,
        "name": "scale",
        "explanation": "Ratio of vertical units to horizontal. If the horizontal unit of the source DEM is degrees (e.g Lat/Long WGS84 projection), you can use scale=111120 if the vertical units are meters (or scale=370400 if they are in feet)"
      },
      {
        "flag": "-az",
        "dataType": "Integer",
        "isOptional": true,
        "defaultValue": 315,
        "name": "azimuth",
        "explanation": "Azimuth of the light, in degrees. 0 if it comes from the top of the raster, 90 from the east, … The default value, 315, should rarely be changed as it is the value generally used to generate shaded maps."
      },
      {
        "flag": "-alt",
        "dataType": "Integer",
        "isOptional": true,
        "defaultValue": 45,
        "name": "altitude",
        "explanation": "Altitude of the light, in degrees. 90 if the light comes from above the DEM, 0 if it is raking light."
      },
      {
        "flag": "-combined",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "combined",
        "explanation": "combined shading, a combination of slope and oblique shading."
      },
      {
        "flag": "-multidirectional",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "multidirectional",
        "explanation": "multidirectional shading, a combination of hillshading illuminated from 225 deg, 270 deg, 315 deg, and 360 deg azimuth. New in version 2.2."
      },
      {
        "flag": "-igor",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "igor",
        "explanation": "    shading which tries to minimize effects on other map features beneath. Can’t be used with -alt option.\n\n    New in version 3.0.\n"
      }
    ],
    "manual_url": "https://gdal.org/programs/gdaldem.html",
    "example": []
  },
  {
    "name": "gdaldem slope",
    "exec": "gdaldem slope",
    "summary": "Tools to analyze and visualize DEMs. The  gdaldem  generally assumes that x, y and z units are identical.\nIf x (east-west) and y (north-south) units are identical, but z (elevation)\nunits are different, the scale (-s) option can be used to set the ratio of\nvertical units to horizontal.\nFor LatLong projections near the equator, where units of latitude and units of\nlongitude are similar, elevation (z) units can be converted to be compatible\nby using scale=370400 (if elevation is in feet) or scale=111120 (if elevation is in\nmeters).  For locations not near the equator, it would be best to reproject your\ngrid using gdalwarp before using gdaldem. The following general options are available:",
    "description": "Generate a slope map from any GDAL-supported elevation raster aspect to generate an aspect map from any GDAL-supported elevation raster. This command will take a DEM raster and output a 32-bit float raster with slope values. You have the option of specifying the type of slope value you want: degrees or percent slope. In cases where the horizontal units differ from the vertical units, you can also supply a scaling factor.\n\nThe value -9999 is used as the output nodata value.",
    "comment": "For all algorithms, except color-relief, a nodata value in the target dataset will be emitted if at least one pixel set to the nodata value is found in the 3x3 window centered around each source pixel. The consequence is that there will be a 1-pixel border around each image set with nodata value.",
    "syntax": "gdaldem slope input_dem output_slope_map [-p use percent slope ( default=degrees )] [-s scale * ( default=1 )] [-alg ZevenbergenThorne] [-compute_edges] [-b Band ( default=1 )] [-of format] [-co \"NAME=VALUE\"] * [-q]",
    "parameters": [
      {
        "flag": null,
        "dataType": "Raster",
        "isOptional": false,
        "name": "input_dem",
        "isInputFile": true,
        "explanation": "The input DEM raster to be processed \n"
      },
      {
        "flag": "output_slope_map",
        "dataType": "Raster",
        "isOptional": false,
        "name": "output_slope_map",
        "isOutputFile": true,
        "explanation": "The output raster produced \n"
      }
    ],
    "options": [
      {
        "flag": "-compute_edges",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "compute_edges",
        "explanation": "Do the computation at raster edges and near nodata values. \n If -compute_edges is specified, gdaldem will compute values at image edges or if a nodata value is found in the 3x3 window, by interpolating missing values."
      },
      {
        "flag": "alg",
        "dataType": "String",
        "isOptional": true,
        "name": "zevenbergenthorne",
        "explanation": "Use Zevenbergen & Thorne formula, instead of Horn\u2019s formula, to compute slope & aspect. The literature suggests Zevenbergen & Thorne to be more suited to smooth landscapes, whereas Horn\u2019s formula to perform better on rougher terrain. \n"
      },
      {
        "flag": "-of",
        "dataType": "String",
        "isOptional": true,
        "defaultValue": "GeoTIFF",
        "name": "format",
        "explanation": "Select the output format. \n \n New in version 2.3.0:  If not specified, the format is guessed from the extension\n(previously was  GTiff \u2013 GeoTIFF File Format ). Use the short format name. \n \n"
      },
      {
        "flag": "-b",
        "dataType": "Integer",
        "defaultValue": 1,
        "isOptional": true,
        "name": "band",
        "explanation": "Select an input band to be processed. Bands are numbered from 1. \n"
      },
      {
        "flag": "-co",
        "dataType": "String",
        "input_pattern": "<NAME=VALUE>",
        "isOptional": true,
        "name": "co",
        "explanation": "Many formats have one or more optional creation options that can be\nused to control particulars about the file created. For instance,\nthe GeoTIFF driver supports creation options to control compression,\nand whether the file should be tiled. \n The creation options available vary by format driver, and some\nsimple formats have no creation options at all. A list of options\nsupported for a format can be listed with the\n \u2013formats \ncommand line option but the documentation for the format is the\ndefinitive source of information on driver creation options.\nSee  Raster drivers  format\nspecific documentation for legal creation options for each format. \n"
      },
      {
        "flag": "-q",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "q",
        "explanation": "Suppress progress monitor and other non-error output. \n"
      },
      {
        "flag": "-p",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "p",
        "explanation": "If specified, the slope will be expressed as percent slope. Otherwise, it is expressed as degrees"
      },
      {
        "flag": "-s",
        "dataType": "Integer",
        "defaultValue": 1,
        "isOptional": true,
        "name": "scale",
        "explanation": "Ratio of vertical units to horizontal. If the horizontal unit of the source DEM is degrees (e.g Lat/Long WGS84 projection), you can use scale=111120 if the vertical units are meters (or scale=370400 if they are in feet)."
      }
    ],
    "manual_url": "https://gdal.org/programs/gdaldem.html",
    "example": []
  },
  {
    "name": "gdaldem aspect",
    "exec": "gdaldem aspect",
    "summary": "Tools to analyze and visualize DEMs. The  gdaldem  generally assumes that x, y and z units are identical.\nIf x (east-west) and y (north-south) units are identical, but z (elevation)\nunits are different, the scale (-s) option can be used to set the ratio of\nvertical units to horizontal.\nFor LatLong projections near the equator, where units of latitude and units of\nlongitude are similar, elevation (z) units can be converted to be compatible\nby using scale=370400 (if elevation is in feet) or scale=111120 (if elevation is in\nmeters).  For locations not near the equator, it would be best to reproject your\ngrid using gdalwarp before using gdaldem. The following general options are available:",
    "description": "Generate an aspect map from any GDAL-supported elevation raster, outputs a 32-bit float raster with pixel values from 0-360 indicating azimuth. This command outputs a 32-bit float raster with values between 0° and 360° representing the azimuth that slopes are facing. The definition of the azimuth is such that : 0° means that the slope is facing the North, 90° it’s facing the East, 180° it’s facing the South and 270° it’s facing the West (provided that the top of your input raster is north oriented). The aspect value -9999 is used as the nodata value to indicate undefined aspect in flat areas with slope=0. By using those 2 options ( -trigonometric and -zero_for_flat), the aspect returned by gdaldem aspect should be identical to the one of GRASS r.slope.aspect. Otherwise, it’s identical to the one of Matthew Perry’s aspect.cpp utility.",
    "comment": "For all algorithms, except color-relief, a nodata value in the target dataset will be emitted if at least one pixel set to the nodata value is found in the 3x3 window centered around each source pixel. The consequence is that there will be a 1-pixel border around each image set with nodata value.",
    "syntax": "gdaldem aspect input_dem output_aspect_map [-trigonometric] [-zero_for_flat] [-alg ZevenbergenThorne] [-compute_edges] [-b Band ( default=1 )] [-of format] [-co \"NAME=VALUE\"] * [-q]",
    "parameters": [
      {
        "flag": null,
        "dataType": "Raster",
        "isOptional": false,
        "name": "input_dem",
        "isInputFile": true,
        "explanation": "The input DEM raster to be processed \n"
      },
      {
        "flag": "output_aspect_map",
        "dataType": "Raster",
        "isOptional": false,
        "name": "output_aspect_map",
        "isOutputFile": true,
        "explanation": "The output raster produced \n"
      }
    ],
    "options": [
      {
        "flag": "-compute_edges",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "compute_edges",
        "explanation": "Do the computation at raster edges and near nodata values. \n If -compute_edges is specified, gdaldem will compute values at image edges or if a nodata value is found in the 3x3 window, by interpolating missing values."
      },
      {
        "flag": "alg",
        "dataType": "String",
        "isOptional": true,
        "name": "zevenbergenthorne",
        "explanation": "Use Zevenbergen & Thorne formula, instead of Horn\u2019s formula, to compute slope & aspect. The literature suggests Zevenbergen & Thorne to be more suited to smooth landscapes, whereas Horn\u2019s formula to perform better on rougher terrain. \n"
      },
      {
        "flag": "-of",
        "dataType": "String",
        "isOptional": true,
        "defaultValue": "GeoTIFF",
        "name": "format",
        "explanation": "Select the output format. \n \n New in version 2.3.0:  If not specified, the format is guessed from the extension\n(previously was  GTiff \u2013 GeoTIFF File Format ). Use the short format name. \n \n"
      },
      {
        "flag": "-b",
        "dataType": "Integer",
        "defaultValue": 1,
        "isOptional": true,
        "name": "band",
        "explanation": "Select an input band to be processed. Bands are numbered from 1. \n"
      },
      {
        "flag": "-co",
        "dataType": "String",
        "input_pattern": "<NAME=VALUE>",
        "isOptional": true,
        "name": "co",
        "explanation": "Many formats have one or more optional creation options that can be\nused to control particulars about the file created. For instance,\nthe GeoTIFF driver supports creation options to control compression,\nand whether the file should be tiled. \n The creation options available vary by format driver, and some\nsimple formats have no creation options at all. A list of options\nsupported for a format can be listed with the\n \u2013formats \ncommand line option but the documentation for the format is the\ndefinitive source of information on driver creation options.\nSee  Raster drivers  format\nspecific documentation for legal creation options for each format. \n"
      },
      {
        "flag": "-q",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "q",
        "explanation": "Suppress progress monitor and other non-error output. \n"
      },
      {
        "flag": "-trigonometric",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "trigonometric",
        "explanation": "Return trigonometric angle instead of azimuth. Thus 0° means East, 90° North, 180° West, 270° South. "
      },
      {
        "flag": "-zero_for_flat",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "zero_for_flat",
        "explanation": "Return 0 for flat areas with slope=0, instead of -9999."
      }
    ],
    "manual_url": "https://gdal.org/programs/gdaldem.html",
    "example": []
  },
  {
    "name": "gdaldem color-relief",
    "exec": "gdaldem color-relief",
    "summary": "Tools to analyze and visualize DEMs. The  gdaldem  generally assumes that x, y and z units are identical.\nIf x (east-west) and y (north-south) units are identical, but z (elevation)\nunits are different, the scale (-s) option can be used to set the ratio of\nvertical units to horizontal.\nFor LatLong projections near the equator, where units of latitude and units of\nlongitude are similar, elevation (z) units can be converted to be compatible\nby using scale=370400 (if elevation is in feet) or scale=111120 (if elevation is in\nmeters).  For locations not near the equator, it would be best to reproject your\ngrid using gdalwarp before using gdaldem. The following general options are available:",
    "description": "Generate a color relief map from any GDAL-supported elevation raster, where color_text_file contains lines of the format \"elevation_value red green blue\". This command outputs a 3-band (RGB) or 4-band (RGBA) raster with values are computed from the elevation and a text-based color configuration file, containing the association between various elevation values and the corresponding wished color. By default, the colors between the given elevation values are blended smoothly and the result is a nice colorized DEM. The -exact_color_entry or -nearest_color_entry options can be used to avoid that linear interpolation for values that don’t match an index of the color configuration file. The color-relief mode is the only mode that supports VRT as output format. In that case, it will translate the color configuration file into appropriate LUT elements. Note that elevations specified as percentage will be translated as absolute values, which must be taken into account when the statistics of the source raster differ from the one that was used when building the VRT.",
    "comment": "For all algorithms, except color-relief, a nodata value in the target dataset will be emitted if at least one pixel set to the nodata value is found in the 3x3 window centered around each source pixel. The consequence is that there will be a 1-pixel border around each image set with nodata value.",
    "syntax": "gdaldem color-relief input_dem color_text_file output_color_relief_map [-alpha] [-exact_color_entry | -nearest_color_entry] [-b Band ( default=1 )] [-of format] [-co \"NAME=VALUE\"] * [-q]",
    "parameters": [
      {
        "flag": null,
        "dataType": "Raster",
        "isOptional": false,
        "name": "input_dem",
        "isInputFile": true,
        "explanation": "The input DEM raster to be processed"
      },
      {
        "flag": "output_color_relief_map",
        "dataType": "Raster",
        "isOptional": false,
        "name": "output_color_relief_map",
        "isOutputFile": true,
        "explanation": "The output raster produced"
      },
      {
        "flag": "color_text_file ",
        "dataType": "Text",
        "isOptional": false,
        "name": "color_text_file ",
        "isInputFile": true,
        "explanation": "Text-based color configuration file. The text-based color configuration file generally contains 4 columns per line: the elevation value and the corresponding Red, Green, Blue component (between 0 and 255). The elevation value can be any floating point value, or the nv keyword for the nodata value. The elevation can also be expressed as a percentage: 0% being the minimum value found in the raster, 100% the maximum value. the syntax of the color configuration file is derived from the one supported by GRASS r.colors utility. ESRI HDR color table files (.clr) also match that syntax. An extra column can be optionally added for the alpha component. If it is not specified, full opacity (255) is assumed. arious field separators are accepted: comma, tabulation, spaces, ‘:’. The alpha component and the support of tab and comma as separators are GDAL specific extensions.\n\nFor example :\n\n3500 white 2500 235:220:175 50% 190 185 135 700 240 250 150 0 50 180 50 nv 0 0 0 0"
      }
    ],
    "options": [
      {
        "flag": "-of",
        "dataType": "String",
        "isOptional": true,
        "defaultValue": "GeoTIFF",
        "name": "format",
        "explanation": "Select the output format. \n \n New in version 2.3.0:  If not specified, the format is guessed from the extension\n(previously was  GTiff \u2013 GeoTIFF File Format ). Use the short format name. \n \n"
      },
      {
        "flag": "-b",
        "dataType": "Integer",
        "defaultValue": 1,
        "isOptional": true,
        "name": "band",
        "explanation": "Select an input band to be processed. Bands are numbered from 1. \n"
      },
      {
        "flag": "-co",
        "dataType": "String",
        "input_pattern": "<NAME=VALUE>",
        "isOptional": true,
        "name": "co",
        "explanation": "Many formats have one or more optional creation options that can be\nused to control particulars about the file created. For instance,\nthe GeoTIFF driver supports creation options to control compression,\nand whether the file should be tiled. \n The creation options available vary by format driver, and some\nsimple formats have no creation options at all. A list of options\nsupported for a format can be listed with the\n \u2013formats \ncommand line option but the documentation for the format is the\ndefinitive source of information on driver creation options.\nSee  Raster drivers  format\nspecific documentation for legal creation options for each format. \n"
      },
      {
        "flag": "-q",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "q",
        "explanation": "Suppress progress monitor and other non-error output. \n"
      },
      {
        "flag": "-alpha",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "alpha",
        "explanation": "Add an alpha channel to the output raster. "
      },
      {
        "flag": "-exact_color_entry",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "exact_color_entry",
        "explanation": "Use strict matching when searching in the color configuration file. If none matching color entry is found, the “0,0,0,0” RGBA quadruplet will be used"
      },
      {
        "flag": "-nearest_color_entry",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "nearest_color_entry",
        "explanation": "Use the RGBA quadruplet corresponding to the closest entry in the color configuration file."
      }
    ],
    "manual_url": "https://gdal.org/programs/gdaldem.html",
    "example": []
  },
  {
    "name": "gdaldem TRI",
    "exec": "gdaldem TRI",
    "summary": "Tools to analyze and visualize DEMs. The  gdaldem  generally assumes that x, y and z units are identical.\nIf x (east-west) and y (north-south) units are identical, but z (elevation)\nunits are different, the scale (-s) option can be used to set the ratio of\nvertical units to horizontal.\nFor LatLong projections near the equator, where units of latitude and units of\nlongitude are similar, elevation (z) units can be converted to be compatible\nby using scale=370400 (if elevation is in feet) or scale=111120 (if elevation is in\nmeters).  For locations not near the equator, it would be best to reproject your\ngrid using gdalwarp before using gdaldem. The following general options are available:",
    "description": "Generate a Terrain Ruggedness Index (TRI) map from any GDAL-supported elevation raster. This command outputs a single-band raster with values computed from the elevation. TRI stands for Terrain Ruggedness Index, which is defined as the mean difference between a central pixel and its surrounding cells (see Wilson et al 2007, Marine Geodesy 30:3-35).\n\nThe value -9999 is used as the output nodata value.",
    "comment": "For all algorithms, except color-relief, a nodata value in the target dataset will be emitted if at least one pixel set to the nodata value is found in the 3x3 window centered around each source pixel. The consequence is that there will be a 1-pixel border around each image set with nodata value.",
    "syntax": "gdaldem TRI input_dem output_TRI_map [-compute_edges] [-b Band ( default=1 )] [-of format] [-q]",
    "parameters": [
      {
        "flag": null,
        "dataType": "Raster",
        "isOptional": false,
        "name": "input_dem",
        "isInputFile": true,
        "explanation": "The input DEM raster to be processed \n"
      },
      {
        "flag": null,
        "dataType": "Raster",
        "isOptional": false,
        "name": "output_TRI_map",
        "isOutputFile": true,
        "explanation": "The output raster produced \n"
      }
    ],
    "options": [
      {
        "flag": "-compute_edges",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "compute_edges",
        "explanation": "Do the computation at raster edges and near nodata values. \n If -compute_edges is specified, gdaldem will compute values at image edges or if a nodata value is found in the 3x3 window, by interpolating missing values."
      },
      {
        "flag": "-of",
        "dataType": "String",
        "isOptional": true,
        "name": "format",
        "defaultValue": "GeoTIFF",
        "explanation": "Select the output format. \n \n New in version 2.3.0:  If not specified, the format is guessed from the extension\n(previously was  GTiff \u2013 GeoTIFF File Format ). Use the short format name. \n \n"
      },
      {
        "flag": "-b",
        "dataType": "Integer",
        "defaultValue": 1,
        "isOptional": true,
        "name": "band",
        "explanation": "Select an input band to be processed. Bands are numbered from 1. \n"
      },
      {
        "flag": "-q",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "q",
        "explanation": "Suppress progress monitor and other non-error output. \n"
      }
    ],
    "manual_url": "https://gdal.org/programs/gdaldem.html",
    "example": []
  },
  {
    "name": "gdaldem TPI",
    "exec": "gdaldem TPI",
    "summary": "Tools to analyze and visualize DEMs. The  gdaldem  generally assumes that x, y and z units are identical.\nIf x (east-west) and y (north-south) units are identical, but z (elevation)\nunits are different, the scale (-s) option can be used to set the ratio of\nvertical units to horizontal.\nFor LatLong projections near the equator, where units of latitude and units of\nlongitude are similar, elevation (z) units can be converted to be compatible\nby using scale=370400 (if elevation is in feet) or scale=111120 (if elevation is in\nmeters).  For locations not near the equator, it would be best to reproject your\ngrid using gdalwarp before using gdaldem. The following general options are available:",
    "description": "Generate a Topographic Position Index (TPI) map from any GDAL-supported elevation raster. This command outputs a single-band raster with values computed from the elevation. TPI stands for Topographic Position Index, which is defined as the difference between a central pixel and the mean of its surrounding cells (see Wilson et al 2007, Marine Geodesy 30:3-35).\n\nThe value -9999 is used as the output nodata value.",
    "comment": "For all algorithms, except color-relief, a nodata value in the target dataset will be emitted if at least one pixel set to the nodata value is found in the 3x3 window centered around each source pixel. The consequence is that there will be a 1-pixel border around each image set with nodata value.",
    "syntax": "gdaldem TPI input_dem output_TPI_map [-compute_edges] [-b Band ( default=1 )] [-of format] [-q]",
    "parameters": [
      {
        "flag": null,
        "dataType": "Raster",
        "isOptional": false,
        "name": "input_dem",
        "isInputFile": true,
        "explanation": "The input DEM raster to be processed \n"
      },
      {
        "flag": null,
        "dataType": "Raster",
        "isOptional": false,
        "name": "output_TPI_map",
        "isOutputFile": true,
        "explanation": "The output raster produced \n"
      }
    ],
    "options": [
      {
        "flag": "-compute_edges",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "compute_edges",
        "explanation": "Do the computation at raster edges and near nodata values. \n If -compute_edges is specified, gdaldem will compute values at image edges or if a nodata value is found in the 3x3 window, by interpolating missing values."
      },
      {
        "flag": "-of",
        "dataType": "String",
        "isOptional": true,
        "defaultValue": "GeoTIFF",
        "name": "format",
        "explanation": "Select the output format. \n \n New in version 2.3.0:  If not specified, the format is guessed from the extension\n(previously was  GTiff \u2013 GeoTIFF File Format ). Use the short format name. \n \n"
      },
      {
        "flag": "-b",
        "dataType": "Integer",
        "defaultValue": 1,
        "isOptional": true,
        "name": "band",
        "explanation": "Select an input band to be processed. Bands are numbered from 1. \n"
      },
      {
        "flag": "-q",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "q",
        "explanation": "Suppress progress monitor and other non-error output. \n"
      }
    ],
    "manual_url": "https://gdal.org/programs/gdaldem.html",
    "example": []
  },
  {
    "name": "gdaldem roughness",
    "exec": "gdaldem roughness",
    "summary": "Tools to analyze and visualize DEMs. The  gdaldem  generally assumes that x, y and z units are identical.\nIf x (east-west) and y (north-south) units are identical, but z (elevation)\nunits are different, the scale (-s) option can be used to set the ratio of\nvertical units to horizontal.\nFor LatLong projections near the equator, where units of latitude and units of\nlongitude are similar, elevation (z) units can be converted to be compatible\nby using scale=370400 (if elevation is in feet) or scale=111120 (if elevation is in\nmeters).  For locations not near the equator, it would be best to reproject your\ngrid using gdalwarp before using gdaldem. The following general options are available:",
    "description": "Generate a roughness map from any GDAL-supported elevation raster. This command outputs a single-band raster with values computed from the elevation. Roughness is the largest inter-cell difference of a central pixel and its surrounding cell, as defined in Wilson et al (2007, Marine Geodesy 30:3-35).\n\nThe value -9999 is used as the output nodata value.",
    "comment": "For all algorithms, except color-relief, a nodata value in the target dataset will be emitted if at least one pixel set to the nodata value is found in the 3x3 window centered around each source pixel. The consequence is that there will be a 1-pixel border around each image set with nodata value.",
    "syntax": "gdaldem roughness input_dem output_roughness_map [-compute_edges] [-b Band ( default=1 )] [-of format] [-q]",
    "parameters": [
      {
        "flag": null,
        "dataType": "Raster",
        "isOptional": false,
        "name": "input_dem",
        "isInputFile": true,
        "explanation": "The input DEM raster to be processed \n"
      },
      {
        "flag": null,
        "dataType": "Raster",
        "isOptional": false,
        "name": "output_roughness_map",
        "isOutputFile": true,
        "explanation": "The output raster produced \n"
      }
    ],
    "options": [
      {
        "flag": "-compute_edges",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "compute_edges",
        "explanation": "Do the computation at raster edges and near nodata values. \n If -compute_edges is specified, gdaldem will compute values at image edges or if a nodata value is found in the 3x3 window, by interpolating missing values."
      },
      {
        "flag": "-of",
        "dataType": "String",
        "isOptional": true,
        "defaultValue": "GeoTIFF",
        "name": "format",
        "explanation": "Select the output format. \n \n New in version 2.3.0:  If not specified, the format is guessed from the extension\n(previously was  GTiff \u2013 GeoTIFF File Format ). Use the short format name. \n \n"
      },
      {
        "flag": "-b",
        "dataType": "Integer",
        "defaultValue": 1,
        "isOptional": true,
        "name": "band",
        "explanation": "Select an input band to be processed. Bands are numbered from 1. \n"
      },
      {
        "flag": "-q",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "q",
        "explanation": "Suppress progress monitor and other non-error output. \n"
      }
    ],
    "manual_url": "https://gdal.org/programs/gdaldem.html",
    "example": []
  },
  {
    "name": "pct2rgb",
    "exec": "pct2rgb",
    "summary": "Convert an 8bit paletted image to 24bit RGB.",
    "description": "This utility will convert a pseudo-color band on the input file into an output\nRGB file of the desired format.",
    "syntax": "pct2rgb.py [-of format] [-b band] [-rgba] source_file dest_file",
    "parameters": [
      {
        "flag": null,
        "dataType": "String",
        "isOptional": false,
        "name": "source_file",
        "isInputFile": true,
        "explanation": "The input file. \n"
      },
      {
        "flag": null,
        "dataType": "String",
        "isOptional": false,
        "name": "dest_file",
        "isOutputFile": true,
        "explanation": "The output RGB file that will be created. \n"
      }
    ],
    "options": [
      {
        "flag": "-of",
        "dataType": "String",
        "isOptional": true,
        "name": "format",
        "explanation": "Select the output format. Starting with\nGDAL 2.3, if not specified, the format is guessed from the extension (previously\nwas GTiff). Use the short format name. \n"
      },
      {
        "flag": "-b",
        "dataType": "String",
        "isOptional": true,
        "name": "band",
        "explanation": "Band to convert to RGB, defaults to 1. \n"
      },
      {
        "flag": "-rgba",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "rgba",
        "explanation": "Generate a RGBA file (instead of a RGB file by default). \n"
      }
    ],
    "manual_url": "https://gdal.org/programs/pct2rgb.html",
    "example": []
  },
  {
    "name": "gdalinfo",
    "exec": "gdalinfo",
    "summary": "Lists information about a raster dataset.",
    "description": "gdalinfo  program lists various information about a GDAL supported\nraster dataset. The following command line parameters can appear in any orderThe format driver used to access the file.\nRaster size (in pixels and lines).\nThe coordinate system for the file (in OGC WKT).\nThe geotransform associated with the file (rotational coefficients\nare currently not reported).\nCorner coordinates in georeferenced, and if possible lat/long based\non the full geotransform (but not GCPs).\nGround control points.\nFile wide (including subdatasets) metadata.\nBand data types.\nBand color interpretations.\nBand block size.\nBand descriptions.\nBand min/max values (internally known and possibly computed).\nBand checksum (if computation asked).\nBand NODATA value.\nBand overview resolutions available.\nBand unit type (i.e.. \u201cmeters\u201d or \u201cfeet\u201d for elevation bands).\nBand pseudo-color tables.",
    "syntax": "gdalinfo [--help-general] [-json] [-mm] [-stats] [-hist] [-nogcp] [-nomd] [-norat] [-noct] [-nofl] [-checksum] [-proj4] [-listmdd] [-mdd domain|`all`]* [-wkt_format WKT1|WKT2|...] [-sd subdataset] [-oo NAME=VALUE]* datasetname",
    "parameters": [
      {
        "flag": null,
        "dataType": "String",
        "isOptional": false,
        "name": "datasetname",
        "isInputFile": true,
        "explanation": "name of the dataset"
      }
    ],
    "options": [
      {
        "flag": "-json",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "json",
        "explanation": "Display the output in json format. "
      },
      {
        "flag": "-mm",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "mm",
        "explanation": "Force computation of the actual min/max values for each band in the dataset. "
      },
      {
        "flag": "-stats",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "stats",
        "explanation": "Read and display image statistics. Force computation if no statistics are stored in an image. "
      },
      {
        "flag": "-approx_stats",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "approx_stats",
        "explanation": "Read and display image statistics. Force computation if no statistics are stored in an image. However, they may be computed based on overviews or a subset of all tiles. Useful if you are in a hurry and don\u2019t want precise stats. "
      },
      {
        "flag": "-hist",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "hist",
        "explanation": "Report histogram information for all bands. "
      },
      {
        "flag": "-nogcp",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "nogcp",
        "explanation": "Suppress ground control points list printing. It may be useful for datasets with huge amount of GCPs, such as L1B AVHRR or HDF4 MODIS which contain thousands of them. "
      },
      {
        "flag": "-nomd",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "nomd",
        "explanation": "Suppress metadata printing. Some datasets may contain a lot of metadata strings. "
      },
      {
        "flag": "-norat",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "norat",
        "explanation": "Suppress printing of raster attribute table. "
      },
      {
        "flag": "-noct",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "noct",
        "explanation": "Suppress printing of color table. "
      },
      {
        "flag": "-checksum",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "checksum",
        "explanation": "Force computation of the checksum for each band in the dataset. "
      },
      {
        "flag": "-listmdd",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "listmdd",
        "explanation": "List all metadata domains available for the dataset. "
      },
      {
        "flag": "-mdd",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "<domain>|all",
        "available_values": [
          "domain",
          "all"
        ],
        "name": "mdd",
        "explanation": "adds metadata using:   domain  Report metadata for the specified domain.   all  Report metadata for all domains. "
      },
      {
        "flag": "-wkt_format",
        "dataType": "String",
        "isOptional": false,
        "input_pattern": "WKT1|WKT2|WKT2_2015|WKT2_2018",
        "available_values": [
          "WKT1",
          "WKT2",
          "WKT2_2015",
          "WKT2_2018"
        ],
        "name": "wkt_format",
        "explanation": "WKT format used to display the SRS. Currently the supported values are: WKT1, WKT2, (latest WKT version, currently  WKT2_2018 ), WKT2_2015, WKT2_2018, New in version 3.0.0.   "
      },
      {
        "flag": "-nofl",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "nofl",
        "explanation": "Only display the first file of the file list. "
      },
      {
        "flag": "-sd",
        "dataType": "String",
        "isOptional": true,
        "name": "sd",
        "explanation": "If the input dataset contains several subdatasets read and display a subdataset with specified  n  number (starting from 1). This is an alternative of giving the full subdataset name. "
      },
      {
        "flag": "-proj4",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "proj4",
        "explanation": "Report a PROJ.4 string corresponding to the file\u2019s coordinate system. "
      },
      {
        "flag": "-oo",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "<NAME=VALUE>",
        "name": "oo",
        "explanation": "Dataset open option (format specific). "
      }
    ],
    "manual_url": "https://gdal.org/programs/gdalinfo.html",
    "example": [
      "gdalinfo ~/openev/utm.tif"
    ]
  },
  {
    "name": "gdal_translate",
    "exec": "gdal_translate",
    "summary": "Converts raster data between different formats.",
    "description": "The  gdal_translate  utility can be used to convert raster data between\ndifferent formats, potentially performing some operations like subsettings,\nresampling, and rescaling pixels in the process.",
    "syntax": "gdal_translate [--help -general] [-ot { Byte / Int16 / UInt16 / UInt32 / Int32 / Float32 / Float64 / CInt16 / CInt32 / CFloat32 / CFloat64 }] [-strict] [-of format] [-b band] * [-mask band] [-expand { gray | rgb | rgba }] [-outsize xsize [%] | 0 ysize [%] | 0] [-tr xres yres] [-r { nearest , bilinear , cubic , cubicspline , lanczos , average , mode }] [-unscale] [-scale [_bn] [src_min src_max [dst_min dst_max]]] * [-exponent [_bn] exp_val] * [-srcwin xoff yoff xsize ysize] [-epo] [-eco] [-projwin ulx uly lrx lry] [-projwin_srs srs_def] [-a_srs srs_def] [-a_ullr ulx uly lrx lry] [-a_nodata value] [-a_scale value] [-a_offset value] [-nogcp] [-gcp pixel line easting northing [elevation]] * |-colorinterp { _bn } { red | green | blue | alpha | gray | undefined }] |-colorinterp { red | green | blue | alpha | gray | undefined }, ...] [-mo \"META-TAG=VALUE\"] * [-q] [-sds] [-co \"NAME=VALUE\"] * [-stats] [-norat] [-oo NAME=VALUE] * src_dataset dst_dataset",
    "parameters": [
      {
        "flag": "src_dataset",
        "dataType": "String",
        "isOptional": false,
        "name": "src_dataset",
        "isInputFile": true,
        "explanation": "The source dataset name. It can be either file name, URL of data source or\nsubdataset name for multi-dataset files. \n"
      },
      {
        "flag": "dst_dataset",
        "dataType": "String",
        "isOptional": false,
        "name": "dst_dataset",
        "isOutputFile": true,
        "explanation": "The destination file name. \n"
      }
    ],
    "options": [
      {
        "flag": "-expand",
        "dataType": "String",
        "isOptional": false,
        "input_pattern": "gray|rgb|rgba",
        "available_values": [
          "gray",
          "rgb",
          "rgba"
        ],
        "name": "expand",
        "explanation": "To expose a dataset with 1 band with a color table as a dataset with\n3 (RGB) or 4 (RGBA) bands. Useful for output drivers such as JPEG,\nJPEG2000, MrSID, ECW that don\u2019t support color indexed datasets. The \u2018gray\u2019\nvalue enables to expand a dataset with a color table that only contains\ngray levels to a gray indexed dataset. \n"
      },
      {
        "flag": "-r",
        "dataType": "String",
        "isOptional": false,
        "input_pattern": "{nearest (default),bilinear,cubic,cubicspline,lanczos,average,mode}",
        "available_values": [
          "nearest",
          "bilinear",
          "cubic",
          "cubicspline",
          "lanczos",
          "average",
          "mode"
        ],
        "defaultValue": "nearest",
        "name": "r",
        "explanation": "Select a resampling algorithm. \n"
      },
      {
        "flag": "-mo",
        "dataType": "String",
        "isOptional": false,
        "input_pattern": "META-TAG=VALUE",
        "name": "mo",
        "explanation": "Passes a metadata key and value to set on the output dataset if possible. \n"
      },
      {
        "flag": "-oo",
        "dataType": "String",
        "isOptional": false,
        "input_pattern": "NAME=VALUE",
        "name": "oo",
        "explanation": "Dataset open option (format specific) \n"
      },
      {
        "flag": "-ot",
        "dataType": "String",
        "isOptional": true,
        "name": "type",
        "available_values": [
          "Byte",
          "Int16",
          "UInt16",
          "UInt32",
          "Int32",
          "Float32",
          "Float64",
          "CInt16",
          "CInt32",
          "CFloat32",
          "CFloat64"
        ],
        "explanation": "Force the output image bands to have a specific type. Use type names\n(i.e.  Byte ,  Int16 ,\u2026) \n"
      },
      {
        "flag": "-strict",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "strict",
        "explanation": "Don\u2019t be forgiving of mismatches and lost data when translating to the\noutput format. \n"
      },
      {
        "flag": "-of",
        "dataType": "String",
        "isOptional": true,
        "name": "format",
        "explanation": "Select the output format. Starting with GDAL 2.3, if not specified, the\nformat is guessed from the extension (previously was GTiff). Use the short\nformat name. \n"
      },
      {
        "flag": "-b",
        "dataType": "String",
        "isOptional": true,
        "name": "band",
        "explanation": "Select an input band  band  for output. Bands are numbered from 1.\nMultiple  -b  switches may be used to select a set of input bands\nto write to the output file, or to reorder bands.  band  can also be set\nto \u201cmask,1\u201d (or just \u201cmask\u201d) to mean the mask band of the first band of the\ninput dataset. \n"
      },
      {
        "flag": "-mask",
        "dataType": "String",
        "isOptional": true,
        "name": "mask",
        "explanation": "Select an input band  band  to create output dataset mask band. Bands are\nnumbered from 1.  band  can be set to \u201cnone\u201d to avoid copying the global\nmask of the input dataset if it exists. Otherwise it is copied by default\n(\u201cauto\u201d), unless the mask is an alpha channel, or if it is explicitly used\nto be a regular band of the output dataset (\u201c-b mask\u201d).  band  can also\nbe set to \u201cmask,1\u201d (or just \u201cmask\u201d) to mean the mask band of the 1st band\nof the input dataset. \n"
      },
      {
        "flag": "-outsize",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "<xsize>[%]|0 <ysize>[%]|0",
        "name": "outsize",
        "explanation": "Set the size of the output file.  Outsize is in pixels and lines unless \u2018%\u2019\nis attached in which case it is as a fraction of the input image size.\nIf one of the 2 values is set to 0, its value will be determined from the\nother one, while maintaining the aspect ratio of the source dataset. \n"
      },
      {
        "flag": "-tr",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "<xres> <yres>",
        "name": "tr",
        "explanation": "set target resolution. The values must be expressed in georeferenced units.\nBoth must be positive values. This is mutually exclusive with\n -outsize  and  -a_ullr . \n"
      },
      {
        "flag": "-scale",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "[src_min src_max [dst_min dst_max]]",
        "name": "scale",
        "explanation": "Rescale the input pixels values from the range  src_min  to  src_max \nto the range  dst_min  to  dst_max .  If omitted the output range is 0\nto 255.  If omitted the input range is automatically computed from the\nsource data. -scale can be repeated several times (if specified only once,\nit also applies to all bands of the output dataset), so as to specify per\nband parameters. It is also possible to use the \u201c-scale_bn\u201d syntax where bn\nis a band number (e.g. \u201c-scale_2\u201d for the 2nd band of the output dataset)\nto specify the parameters of one or several specific bands. \n"
      },
      {
        "flag": "-exponent",
        "dataType": "String",
        "isOptional": true,
        "name": "exp_val",
        "explanation": "To apply non-linear scaling with a power function. exp_val is the exponent\nof the power function (must be positive). This option must be used with the\n-scale option. If specified only once, -exponent applies to all bands of\nthe output image. It can be repeated several times so as to specify per\nband parameters. It is also possible to use the \u201c-exponent_bn\u201d syntax where\nbn is a band number (e.g. \u201c-exponent_2\u201d for the 2nd band of the output\ndataset) to specify the parameters of one or several specific bands. \n"
      },
      {
        "flag": "-unscale",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "unscale",
        "explanation": "Apply the scale/offset metadata for the bands to convert scaled values to\nunscaled values.  It is also often necessary to reset the output datatype\nwith the  -ot  switch. \n"
      },
      {
        "flag": "-srcwin",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "<xoff> <yoff> <xsize> <ysize>",
        "name": "srcwin",
        "isInputFile": true,
        "explanation": "Selects a subwindow from the source image for copying based on pixel/line location. \n"
      },
      {
        "flag": "-projwin",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "<ulx> <uly> <lrx> <lry>",
        "name": "projwin",
        "explanation": "Selects a subwindow from the source image for copying\n(like  -srcwin ) but with the corners given in georeferenced\ncoordinates (by default expressed in the SRS of the dataset. Can be\nchanged with  -projwin_srs ). \n \n Note \n In GDAL 2.1.0 and 2.1.1, using -projwin with coordinates not aligned\nwith pixels will result in a sub-pixel shift. This has been corrected\nin later versions. When selecting non-nearest neighbour resampling,\nstarting with GDAL 2.1.0, sub-pixel accuracy is however used to get\nbetter results. \n \n"
      },
      {
        "flag": "-projwin_srs",
        "dataType": "String",
        "isOptional": true,
        "name": "srs_def",
        "explanation": "Specifies the SRS in which to interpret the coordinates given with\n -projwin . The <srs_def> may be any of the usual GDAL/OGR forms,\ncomplete WKT, PROJ.4, EPSG:n or a file containing the WKT. \n \n Warning \n This does not cause reprojection of the dataset to the specified SRS. \n \n"
      },
      {
        "flag": "-epo",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "epo",
        "explanation": "(Error when Partially Outside) If this option is set,  -srcwin  or\n -projwin  values that falls partially outside the source raster\nextent will be considered as an error. The default behaviour is to accept\nsuch requests, when they were considered as an error before. \n"
      },
      {
        "flag": "-eco",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "eco",
        "explanation": "(Error when Completely Outside) Same as  -epo , except that the\ncriterion for erroring out is when the request falls completely outside\nthe source raster extent. \n"
      },
      {
        "flag": "-a_srs",
        "dataType": "String",
        "isOptional": true,
        "name": "srs_def",
        "explanation": "Override the projection for the output file.  The<srs_def> may be any of\nthe usual GDAL/OGR forms, complete WKT, PROJ.4, EPSG:n or a file containing\nthe WKT. No reprojection is done. \n"
      },
      {
        "flag": "-a_scale",
        "dataType": "String",
        "isOptional": true,
        "name": "value",
        "explanation": "Set band scaling value(no modification of pixel values is done) \n \n New in version 2.3. \n \n"
      },
      {
        "flag": "-a_offset",
        "dataType": "Float",
        "isOptional": true,
        "name": "a_offset",
        "explanation": "Set band offset value (no modification of pixel values is done) \n \n New in version 2.3. \n \n"
      },
      {
        "flag": "-a_ullr",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "<ulx> <uly> <lrx> <lry>",
        "name": "a_ullr",
        "explanation": "Assign/override the georeferenced bounds of the output file.  This assigns\ngeoreferenced bounds to the output file, ignoring what would have been\nderived from the source file. So this does not cause reprojection to the\nspecified SRS. \n"
      },
      {
        "flag": "-a_nodata",
        "dataType": "String",
        "isOptional": true,
        "name": "value",
        "explanation": "Assign a specified nodata value to output bands. It can\nbe set to <i>none</i> to avoid setting a nodata value to the output file if\none exists for the source file. Note that, if the input dataset has a\nnodata value, this does not cause pixel values that are equal to that nodata\nvalue to be changed to the value specified with this option. \n"
      },
      {
        "flag": "-colorinterp_X",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "<red|green|blue|alpha|gray|undefined>",
        "available_values": [
          "red",
          "green",
          "blue",
          "alpha",
          "gray"
        ],
        "name": "colorinterp_x",
        "explanation": "Override the color interpretation of band X (where X is a valid band number,\nstarting at 1) \n \n New in version 2.3. \n \n"
      },
      {
        "flag": "-colorinterp",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "<red|green|blue|alpha|gray|undefined[,red|green|blue|alpha|gray|undefined]*>",
        "available_values": [
          "red",
          "green",
          "blue",
          "alpha",
          "gray",
          "green",
          "blue",
          "alpha",
          "gray"
        ],
        "name": "colorinterp",
        "explanation": "Override the color interpretation of all specified bands. For\nexample -colorinterp red,green,blue,alpha for a 4 band output dataset. \n \n New in version 2.3. \n \n"
      },
      {
        "flag": "-co",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "<NAME=VALUE>",
        "name": "co",
        "explanation": "Many formats have one or more optional creation options that can be\nused to control particulars about the file created. For instance,\nthe GeoTIFF driver supports creation options to control compression,\nand whether the file should be tiled. \n The creation options available vary by format driver, and some\nsimple formats have no creation options at all. A list of options\nsupported for a format can be listed with the\n \u2013formats \ncommand line option but the documentation for the format is the\ndefinitive source of information on driver creation options.\nSee  Raster drivers  format\nspecific documentation for legal creation options for each format. \n"
      },
      {
        "flag": "-nogcp",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "nogcp",
        "explanation": "Do not copy the GCPs in the source dataset to the output dataset. \n"
      },
      {
        "flag": "-gcp",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "<pixel> <line> <easting> <northing> <elevation>",
        "name": "gcp",
        "explanation": "Add the indicated ground control point to the output dataset.  This option\nmay be provided multiple times to provide a set of GCPs. \n"
      },
      {
        "flag": "-q",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "q",
        "explanation": "Suppress progress monitor and other non-error output. \n"
      },
      {
        "flag": "-sds",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "sds",
        "explanation": "Copy all subdatasets of this file to individual output files.  Use with\nformats like HDF that have subdatasets. \n"
      },
      {
        "flag": "-stats",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "stats",
        "explanation": "Force (re)computation of statistics. \n"
      },
      {
        "flag": "-norat",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "norat",
        "explanation": "Do not copy source RAT into destination dataset. \n"
      }
    ],
    "manual_url": "https://gdal.org/programs/gdal_translate.html",
    "example": [
      "gdal_translate -of GTiff -co \"TILED=YES\" utm.tif utm_tiled.tif"
    ]
  },
  {
    "name": "gdaladdo",
    "exec": "gdaladdo",
    "summary": "Builds or rebuilds overview images.",
    "description": "The gdaladdo utility can be used to build or rebuild overview images for\nmost supported file formats with one of several downsampling algorithms. gdaladdo will honour properly NODATA_VALUES tuples (special dataset metadata) so that only a given RGB triplet (in case of a RGB image) will be considered as the nodata value and not each value of the triplet independently per band.\n\nSelecting a level value like 2 causes an overview level that is 1/2 the resolution (in each dimension) of the base layer to be computed. If the file has existing overview levels at a level selected, those levels will be recomputed and rewritten in place.\n\nFor internal GeoTIFF overviews (or external overviews in GeoTIFF format), note that -clean does not shrink the file. A later run of gdaladdo with overview levels will cause the file to be expanded, rather than reusing the space of the previously deleted overviews. If you just want to change the resampling method on a file that already has overviews computed, you don’t need to clean the existing overviews.\n\nSome format drivers do not support overviews at all. Many format drivers store overviews in a secondary file with the extension .ovr that is actually in TIFF format. By default, the GeoTIFF driver stores overviews internally to the file operated on (if it is writable), unless the -ro flag is specified.\n\nMost drivers also support an alternate overview format using Erdas Imagine format. To trigger this use the USE_RRD=YES configuration option. This will place the overviews in an associated .aux file suitable for direct use with Imagine or ArcGIS as well as GDAL applications. (e.g. –config USE_RRD YES)\nExternal overviews in GeoTIFF format\n\nExternal overviews created in TIFF format may be compressed using the COMPRESS_OVERVIEW configuration option. All compression methods, supported by the GeoTIFF driver, are available here. (e.g. –config COMPRESS_OVERVIEW DEFLATE). The photometric interpretation can be set with –config PHOTOMETRIC_OVERVIEW {RGB,YCBCR,…}, and the interleaving with –config INTERLEAVE_OVERVIEW {PIXEL|BAND}.\n\nFor JPEG compressed external overviews, the JPEG quality can be set with “–config JPEG_QUALITY_OVERVIEW value”\n\nFor LZW or DEFLATE compressed external overviews, the predictor value can be set with “–config PREDICTOR_OVERVIEW 1|2|3”\n\nTo produce the smallest possible JPEG-In-TIFF overviews, you should use :\n\n--config COMPRESS_OVERVIEW JPEG --config PHOTOMETRIC_OVERVIEW YCBCR --config INTERLEAVE_OVERVIEW PIXEL\n\nExternal overviews can be created in the BigTIFF format by using the BIGTIFF_OVERVIEW configuration option : –config BIGTIFF_OVERVIEW {IF_NEEDED|IF_SAFER|YES|NO}. The default value is IF_SAFER starting with GDAL 2.3.0 (previously was IF_NEEDED). The behaviour of this option is exactly the same as the BIGTIFF creation option documented in the GeoTIFF driver documentation.\n\n    YES forces BigTIFF.\n\n    NO forces classic TIFF.\n\n    IF_NEEDED will only create a BigTIFF if it is clearly needed (uncompressed, and overviews larger than 4GB).\n\n    IF_SAFER will create BigTIFF if the resulting file might exceed 4GB.\n\nSee the documentation of the GTiff – GeoTIFF File Format driver for further explanations on all those options.\n",
    "syntax": "gdaladdo [-r { nearest, average, gauss, cubic, cubicspline, lanczos , average_magphase, mode }] [-b band] * [-minsize val] [-ro] [-clean] [-oo NAME=VALUE] * [--help -general] filename [levels]",
    "parameters": [
      {
        "flag": null,
        "dataType": "String",
        "isOptional": false,
        "name": "filename",
        "isInputFile": true,
        "explanation": "filename"
      }
    ],
    "options": [
      {
        "flag": "-oo",
        "dataType": "String",
        "isOptional": false,
        "input_pattern": "NAME=VALUE",
        "name": "oo",
        "explanation": "Dataset open option (format specific) \n"
      },
      {
        "flag": "-r",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "{nearest (default),average,gauss,cubic,cubicspline,lanczos,average_magphase,mode}",
        "available_values": [
          "nearest",
          "average",
          "gauss",
          "cubic",
          "cubicspline",
          "lanczos",
          "average_magphase",
          "mode"
        ],
        "defaultValue": "nearest",
        "name": "r",
        "explanation": "Select a resampling algorithm. \n nearest  applies a nearest neighbour (simple sampling) resampler \n average  computes the average of all non-NODATA contributing pixels. \n gauss  applies a Gaussian kernel before computing the overview,\nwhich can lead to better results than simple averaging in e.g case of sharp edges\nwith high contrast or noisy patterns. The advised level values should be 2, 4, 8, \u2026\nso that a 3x3 resampling Gaussian kernel is selected. \n cubic  applies a cubic convolution kernel. \n cubicspline  applies a B-Spline convolution kernel. \n lanczos  applies a Lanczos windowed sinc convolution kernel. \n average_magphase  averages complex data in mag/phase space. \n mode  selects the value which appears most often of all the sampled points. \n"
      },
      {
        "flag": "-b",
        "dataType": "String",
        "isOptional": true,
        "name": "band",
        "explanation": "Select an input band  band  for overview generation. Band numbering\nstarts from 1. Multiple  -b  switches may be used to select a set\nof input bands to generate overviews. \n"
      },
      {
        "flag": "-ro",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "ro",
        "explanation": "open the dataset in read-only mode, in order to generate external overview\n(for GeoTIFF especially). \n"
      },
      {
        "flag": "-clean",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "clean",
        "explanation": "remove all overviews. \n"
      },
      {
        "flag": "-minsize",
        "dataType": "String",
        "isOptional": true,
        "name": "val",
        "explanation": "Maximum width or height of the smallest overview level. Only taken into\naccount if explicit levels are not specified. Defaults to 256. \n \n New in version 2.3. \n \n"
      },
      {
        "flag": "filename",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "filename",
        "explanation": "The file to build overviews for (or whose overviews must be removed). \n"
      },
      {
        "flag": "levels",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "levels",
        "explanation": "A list of integral overview levels to build. Ignored with  -clean  option. \n \n New in version 2.3:  levels are no longer required to build overviews.\nIn which case, appropriate overview power-of-two factors will be selected\nuntil the smallest overview is smaller than the value of the -minsize switch. \n \n"
      }
    ],
    "manual_url": "https://gdal.org/programs/gdaladdo.html",
    "example": []
  },
  {
    "name": "gdaltindex",
    "exec": "gdaltindex",
    "summary": "Builds a shapefile as a raster tileindex.",
    "description": "This program builds a shapefile with a record for each input raster file,\nan attribute containing the filename, and a polygon geometry outlining the\nraster.  This output is suitable for use with  MapServer  as a raster\ntileindex.",
    "syntax": "gdaltindex [-f format] [-tileindex field_name] [-write_absolute_path] [-skip_different_projection] [-t_srs target_srs] [-src_srs_name field_name] [-src_srs_format [AUTO | WKT | EPSG | PROJ] [-lyr_name name] index_file [gdal_file] *",
    "parameters": [
      {
        "flag": "index_file",
        "dataType": "String",
        "isOptional": true,
        "name": "index_file",
        "isInputFile": true,
        "explanation": "The name of the output file to create/append to. The default shapefile will\nbe created if it doesn\u2019t already exist, otherwise it will append to the\nexisting file. \n"
      }
    ],
    "options": [
      {
        "flag": "-f",
        "dataType": "String",
        "isOptional": true,
        "name": "format",
        "explanation": "The OGR format of the output tile index file. Starting with\nGDAL 2.3, if not specified, the format is guessed from the extension (previously\nwas ESRI Shapefile). \n"
      },
      {
        "flag": "-tileindex",
        "dataType": "String",
        "isOptional": true,
        "name": "field_name",
        "explanation": "The output field name to hold the file path/location to the indexed\nrasters. The default tile index field name is  location . \n"
      },
      {
        "flag": "-write_absolute_path",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "write_absolute_path",
        "explanation": "The absolute path to the raster files is stored in the tile index file.\nBy default the raster filenames will be put in the file exactly as they\nare specified on the command line. \n"
      },
      {
        "flag": "-skip_different_projection",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "skip_different_projection",
        "explanation": "Only files with same projection as files already inserted in the tileindex\nwill be inserted (unless  -t_srs  is specified). Default does not\ncheck projection and accepts all inputs. \n"
      },
      {
        "flag": "-t_srs",
        "dataType": "String",
        "isOptional": true,
        "name": "target_srs",
        "explanation": "Geometries of input files will be transformed to the desired target\ncoordinate reference system.\nDefault creates simple rectangular polygons in the same coordinate reference\nsystem as the input rasters. \n"
      },
      {
        "flag": "-src_srs_name",
        "dataType": "String",
        "isOptional": true,
        "name": "field_name",
        "explanation": "The name of the field to store the SRS of each tile. This field name can be\nused as the value of the TILESRS keyword in MapServer \n"
      },
      {
        "flag": "-src_srs_format",
        "dataType": "String",
        "isOptional": true,
        "name": "type",
        "explanation": "The format in which the SRS of each tile must be written. Types can be\nAUTO, WKT, EPSG, PROJ. \n"
      },
      {
        "flag": "-lyr_name",
        "dataType": "String",
        "isOptional": true,
        "name": "name",
        "explanation": "Layer name to create/append to in the output tile index file. \n"
      },
      {
        "flag": "gdal_file",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "gdal_file",
        "explanation": "The input GDAL raster files, can be multiple files separated by spaces.\nWildcards my also be used. Stores the file locations in the same style as\nspecified here, unless  -write_absolute_path  option is also used. \n"
      }
    ],
    "manual_url": "https://gdal.org/programs/gdaltindex.html",
    "example": [
      "gdaltindex doq_index.shp doq/*.tif"
    ]
  },
  {
    "name": "gdal_contour",
    "exec": "gdal_contour",
    "summary": "Builds vector contour lines from a raster elevation model.",
    "description": "The  gdal_contour  generates a vector contour file from the input\nraster elevation model (DEM).",
    "syntax": "gdal_contour [-b band] [-a attribute_name] [-amin attribute_name] [-amax attribute_name] [-3 d] [-inodata] [-snodata n] [-i interval] [-f formatname] [[-dsco NAME=VALUE] ...] [[-lco NAME=VALUE] ...] [-off offset] [-fl level level...] [-e exp_base] [-nln outlayername] [-p] src_filename dst_filename",
    "parameters": [],
    "options": [
      {
        "flag": "-b",
        "dataType": "String",
        "isOptional": true,
        "name": "band",
        "explanation": "Picks a particular band to get the DEM from. Defaults to band 1. \n"
      },
      {
        "flag": "-a",
        "dataType": "String",
        "isOptional": true,
        "name": "aname",
        "explanation": "Provides a name for the attribute in which to put the elevation.\nIf not provided no elevation attribute is attached.\nIgnored in polygonal contouring ( -p ) mode. \n"
      },
      {
        "flag": "-amin",
        "dataType": "String",
        "isOptional": true,
        "name": "amin",
        "explanation": "Provides a name for the attribute in which to put the minimum elevation\nof contour polygon. If not provided no minimum elevation attribute\nis attached. Ignored in default line contouring mode. \n \n New in version 2.4.0. \n \n"
      },
      {
        "flag": "-amax",
        "dataType": "String",
        "isOptional": true,
        "name": "amax",
        "explanation": "Provides a name for the attribute in which to put the maximum elevation of\ncontour polygon. If not provided no maximim elevation attribute is attached.\nIgnored in default line contouring mode. \n \n New in version 2.4.0. \n \n"
      },
      {
        "flag": "-3d",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "3d",
        "explanation": "Force production of 3D vectors instead of 2D.\nIncludes elevation at every vertex. \n"
      },
      {
        "flag": "-inodata",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "inodata",
        "explanation": "Ignore any nodata value implied in the dataset - treat all values as valid. \n"
      },
      {
        "flag": "-snodata",
        "dataType": "Float",
        "isOptional": true,
        "name": "snodata",
        "explanation": "Input pixel value to treat as \u201cnodata\u201d. \n"
      },
      {
        "flag": "-f",
        "dataType": "String",
        "isOptional": true,
        "name": "format",
        "explanation": "Create output in a particular format. \n \n New in version 2.3.0:  If not specified, the format is guessed from the extension (previously was ESRI Shapefile). \n \n"
      },
      {
        "flag": "-dsco",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "<NAME=VALUE>",
        "name": "dsco",
        "explanation": "Dataset creation option (format specific) \n"
      },
      {
        "flag": "-lco",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "<NAME=VALUE>",
        "name": "lco",
        "explanation": "Layer creation option (format specific) \n"
      },
      {
        "flag": "-i",
        "dataType": "String",
        "isOptional": true,
        "name": "interval",
        "explanation": "Elevation interval between contours. \n"
      },
      {
        "flag": "-off",
        "dataType": "String",
        "isOptional": true,
        "name": "offset",
        "explanation": "Offset from zero relative to which to interpret intervals. \n"
      },
      {
        "flag": "-fl",
        "dataType": "String",
        "isOptional": true,
        "name": "level",
        "explanation": "Name one or more \u201cfixed levels\u201d to extract. \n"
      },
      {
        "flag": "-e",
        "dataType": "String",
        "isOptional": true,
        "name": "base",
        "explanation": "Generate levels on an exponential scale:  base ^ k , for  k  an integer. \n \n New in version 2.4.0. \n \n"
      },
      {
        "flag": "-nln",
        "dataType": "String",
        "isOptional": true,
        "name": "name",
        "explanation": "Provide a name for the output vector layer. Defaults to \u201ccontour\u201d. \n"
      },
      {
        "flag": "-p",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "p",
        "explanation": "Generate contour polygons rather than contour lines. \n \n New in version 2.4.0. \n \n"
      }
    ],
    "manual_url": "https://gdal.org/programs/gdal_contour.html",
    "example": [
      "gdal_contour -a elev dem.tif contour.shp -i 10.0"
    ]
  },
  {
    "name": "gdalbuildvrt",
    "exec": "gdalbuildvrt",
    "summary": "Builds a VRT from a list of datasets.",
    "description": "This program builds a VRT (Virtual Dataset) that is a mosaic of the list of\ninput GDAL datasets. The list of input GDAL datasets can be specified at the end\nof the command line, or put in a text file (one filename per line) for very long lists,\nor it can be a MapServer tileindex (see ref gdaltindex utility). In the later case, all\nentries in the tile index will be added to the VRT. With -separate, each files goes into a separate band in the VRT band. Otherwise,\nthe files are considered as tiles of a larger mosaic and the VRT file has as many bands as one\nof the input files. If one GDAL dataset is made of several subdatasets and has 0 raster bands,\nall the subdatasets will be added to the VRT rather than the dataset itself. gdalbuildvrt does some amount of checks to assure that all files that will be put\nin the resulting VRT have similar characteristics : number of bands, projection, color\ninterpretation\u2026 If not, files that do not match the common characteristics will be skipped.\n(This is only true in the default mode, and not when using the -separate option) If there is some amount of spatial overlapping between files, the order of files\nappearing in the list of source matter: files that are listed at the end are the ones\nfrom which the content will be fetched. Note that nodata will be taken into account\nto potentially fetch data from less prioritary datasets, but currently, alpha channel\nis not taken into account to do alpha compositing (so a source with alpha=0\nappearing on top of another source will override is content). This might be\nchanged in later versions.",
    "syntax": "gdalbuildvrt [-tileindex field_name] [-resolution { highest | lowest | average | user }] [-te xmin ymin xmax ymax] [-tr xres yres] [-tap] [-separate] [-b band] * [-sd subdataset] [-allow_projection_difference] [-q] [-optim {[AUTO] / VECTOR / RASTER }] [-addalpha] [-hidenodata] [-srcnodata \"value [value...]\"] [-vrtnodata \"value [value...]\"] [-a_srs srs_def] [-r { nearest , bilinear , cubic , cubicspline , lanczos , average , mode }] [-oo NAME=VALUE] * [-input_file_list my_list.txt] [-overwrite] output.vrt [gdalfile] *",
    "parameters": [
      {
        "flag": null,
        "dataType": "String",
        "isOptional": false,
        "name": "output.vrt",
        "isOutputFile": true,
        "explanation": "output vrt file"
      }
    ],
    "options": [
      {
        "flag": "-resolution",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "{highest|lowest|average|user}",
        "available_values": [
          "highest",
          "lowest",
          "average",
          "user"
        ],
        "name": "resolution",
        "explanation": "In case the resolution of all input files is not the same, the -resolution flag\nenables the user to control the way the output resolution is computed. \n highest  will pick the smallest values of pixel dimensions within the set of source rasters. \n lowest  will pick the largest values of pixel dimensions within the set of source rasters. \n average  is the default and will compute an average of pixel dimensions within the set of source rasters. \n user  must be used in combination with the  -tr  option to specify the target resolution. \n"
      },
      {
        "flag": "-te",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "xmin ymin xmax ymax",
        "name": "te",
        "explanation": "Set georeferenced extents of VRT file. The values must be expressed in georeferenced units.\nIf not specified, the extent of the VRT is the minimum bounding box of the set of source rasters. \n"
      },
      {
        "flag": "-optim",
        "dataType": "String",
        "isOptional": true,
        "available_values": [
          "AUTO",
          "VECTOR",
          "RASTER"
        ],
        "name": "{auto/vector/raster}}",
        "explanation": "Force the algorithm used (results are identical). The raster mode is used in most cases and optimise\nread/write operations. The vector mode is useful with a decent amount of input features and optimise\nthe CPU use. That mode have to be used with tiled images to be efficient. The auto mode (the default)\nwill chose the algorithm based on input and output properties. \n \n New in version 2.3. \n \n"
      },
      {
        "flag": "-r",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "{nearest (default),bilinear,cubic,cubicspline,lanczos,average,mode}",
        "available_values": [
          "nearest",
          "bilinear",
          "cubic",
          "cubicspline",
          "lanczos",
          "average",
          "mode"
        ],
        "name": "r",
        "defaultValue": "nearest",
        "explanation": "Select a resampling algorithm. \n"
      },
      {
        "flag": "-oo",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "NAME=VALUE",
        "name": "oo",
        "explanation": "Dataset open option (format specific) \n \n New in version 2.2. \n \n"
      },
      {
        "flag": "-tileindex",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "tileindex",
        "explanation": "Use the specified value as the tile index field, instead of the default\nvalue with is \u2018location\u2019. \n"
      },
      {
        "flag": "-tr",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "<res> <yres>",
        "name": "tr",
        "explanation": "Set target resolution. The values must be expressed in georeferenced units.\nBoth must be positive values. Specifying those values is of course incompatible with\nhighest|lowest|average values for  -resolution  option. \n"
      },
      {
        "flag": "-tap",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "tap",
        "explanation": "(target aligned pixels) align\nthe coordinates of the extent of the output file to the values of the  -tr ,\nsuch that the aligned extent includes the minimum extent. \n"
      },
      {
        "flag": "-addalpha",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "addalpha",
        "explanation": "Adds an alpha mask band to the VRT when the source raster have none. Mainly useful for RGB sources (or grey-level sources).\nThe alpha band is filled on-the-fly with the value 0 in areas without any source raster, and with value\n255 in areas with source raster. The effect is that a RGBA viewer will render\nthe areas without source rasters as transparent and areas with source rasters as opaque.\nThis option is not compatible with  -separate . \n"
      },
      {
        "flag": "-hidenodata",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "hidenodata",
        "explanation": "Even if any band contains nodata value, giving this option makes the VRT band\nnot report the NoData. Useful when you want to control the background color of\nthe dataset. By using along with the -addalpha option, you can prepare a\ndataset which doesn\u2019t report nodata value but is transparent in areas with no\ndata. \n"
      },
      {
        "flag": "-srcnodata",
        "dataType": "Float",
        "isOptional": true,
        "input_pattern": "<value> [<value>...]",
        "name": "srcnodata",
        "explanation": "Set nodata values for input bands (different values can be supplied for each band). If\nmore than one value is supplied all values should be quoted to keep them\ntogether as a single operating system argument. If the option is not specified, the\nintrinsic nodata settings on the source datasets will be used (if they exist). The value set by this option\nis written in the NODATA element of each ComplexSource element. Use a value of\n None  to ignore intrinsic nodata settings on the source datasets. \n"
      },
      {
        "flag": "-b",
        "dataType": "String",
        "isOptional": true,
        "name": "band",
        "explanation": "Select an input <band> to be processed. Bands are numbered from 1.\nIf input bands not set all bands will be added to vrt.\nMultiple  -b  switches may be used to select a set of input bands. \n"
      },
      {
        "flag": "-sd",
        "dataType": "String",
        "isOptional": true,
        "name": "subdataset",
        "explanation": "If the input\ndataset contains several subdatasets use a subdataset with the specified\nnumber (starting from 1). This is an alternative of giving the full subdataset\nname as an input. \n"
      },
      {
        "flag": "-vrtnodata",
        "dataType": "Float",
        "isOptional": true,
        "input_pattern": "<value> [<value>...]",
        "name": "vrtnodata",
        "explanation": "Set nodata values at the VRT band level (different values can be supplied for each band).  If more\nthan one value is supplied all values should be quoted to keep them together\nas a single operating system argument.  If the option is not specified,\nintrinsic nodata settings on the first dataset will be used (if they exist). The value set by this option\nis written in the NoDataValue element of each VRTRasterBand element. Use a value of\n None  to ignore intrinsic nodata settings on the source datasets. \n"
      },
      {
        "flag": "-separate",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "separate",
        "explanation": "Place each input file into a separate band. In that case, only the first\nband of each dataset will be placed into a new band. Contrary to the default mode, it is not\nrequired that all bands have the same datatype. \n"
      },
      {
        "flag": "-allow_projection_difference",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "allow_projection_difference",
        "explanation": "When this option is specified, the utility will accept to make a VRT even if the input datasets have\nnot the same projection. Note: this does not mean that they will be reprojected. Their projection will\njust be ignored. \n"
      },
      {
        "flag": "-a_srs",
        "dataType": "String",
        "isOptional": true,
        "name": "srs_def",
        "explanation": "Override the projection for the output file.  The <srs_def> may be any of the usual GDAL/OGR forms,\ncomplete WKT, PROJ.4, EPSG:n or a file containing the WKT. No reprojection is done. \n"
      },
      {
        "flag": "-input_file_list",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "mylist.txt",
        "name": "input_file_list",
        "explanation": "To specify a text file with an input filename on each line \n"
      },
      {
        "flag": "-q",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "q",
        "explanation": "To disable the progress bar on the console \n"
      },
      {
        "flag": "-overwrite",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "overwrite",
        "explanation": "Overwrite the VRT if it already exists. \n"
      }
    ],
    "manual_url": "https://gdal.org/programs/gdalbuildvrt.html",
    "example": []
  },
  {
    "name": "gdalcompare",
    "exec": "gdalcompare",
    "summary": "Compare two images.",
    "description": "The  gdalcompare.py  script compares two GDAL supported datasets and\nreports the differences. In addition to reporting differences to the\nstandard out the script will also return the difference count in it\u2019s\nexit value. Image pixels, and various metadata are checked. There is also a byte by\nbyte comparison done which will count as one difference. So if it is\nonly important that the GDAL visible data is identical a difference\ncount of 1 (the binary difference) should be considered acceptable. Note that the gdalcompare.py script can also be called as a library from python code though it is not typically in the python path for including. The primary entry point is gdalcompare.compare() which takes a golden gdal.Dataset and a new gdal.Dataset as arguments and returns a difference count (excluding the binary comparison). The gdalcompare.compare_sds() entry point can be used to compare subdatasets.",
    "syntax": "gdalcompare.py [-sds] golden_file new_file",
    "parameters": [
      {
        "flag": null,
        "dataType": "Raster",
        "isOptional": false,
        "name": "golden_file",
        "isInputFile": true,
        "explanation": "The file that is considered correct, referred to as the golden file. \n"
      },
      {
        "flag": null,
        "dataType": "Raster",
        "isOptional": false,
        "name": "new_file",
        "isOutputFile": true,
        "explanation": "The file being compared to the golden file, referred to as the new\nfile. \n"
      }
    ],
    "options": [
      {
        "flag": "-sds",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "sds",
        "explanation": "If this flag is passed the script will compare all subdatasets that\nare part of the dataset, otherwise subdatasets are ignored. \n"
      }
    ],
    "manual_url": "https://gdal.org/programs/gdalcompare.html",
    "example": []
  },
  {
    "name": "gdalmanage",
    "exec": "gdalmanage",
    "summary": "Identify, delete, rename and copy raster data files.",
    "description": "The  gdalmanage  program can perform various operations on raster data\nfiles, depending on the chosen  mode . This includes identifying raster\ndata types and deleting, renaming or copying the files.",
    "syntax": "gdalmanage mode [-r] [-u] [-f format] datasetname [newdatasetname]",
    "parameters": [
      {
        "flag": null,
        "dataType": "Raster",
        "isOptional": false,
        "name": "datasetname",
        "isInputFile": true,
        "explanation": "Raster file to operate on. \n"
      }
    ],
    "options": [
      {
        "flag": "mode",
        "dataType": "Boolean",
        "isOptional": true,
        "available_values": [
          "identify",
          "copy",
          "rename",
          "delete"
        ],
        "name": "mode",
        "explanation": "Mode of operation \n \n identify  <datasetname> : List data format of file. \n \n copy  <datasetname>  <newdatasetname> : Create a copy of the raster file with a new name. \n \n rename  <datasetname>  <newdatasetname> : Change the name of the raster file. \n \n delete  `` ``  <datasetname> : Delete raster file. \n \n \n"
      },
      {
        "flag": "-r",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "r",
        "explanation": "Recursively scan files/folders for raster files. \n"
      },
      {
        "flag": "-u",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "u",
        "explanation": "Report failures if file type is unidentified. \n"
      },
      {
        "flag": "-f",
        "dataType": "String",
        "isOptional": true,
        "name": "format",
        "explanation": "Specify format of raster file if unknown by the application. Uses\nshort data format name (e.g.  GTiff ). \n"
      },
      {
        "flag": "newdatasetname",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "newdatasetname",
        "explanation": "For copy and rename modes, you provide a  source  filename and a\n target  filename, just like copy and move commands in an operating\nsystem. \n"
      }
    ],
    "manual_url": "https://gdal.org/programs/gdalmanage.html",
    "example": [
      "gdalmanage identify -r 50m_raster/"
    ]
  },
  {
    "name": "gdal_calc.py",
    "exec": "gdal_calc.py",
    "summary": "Command line raster calculator with numpy syntax.",
    "description": "Command line raster calculator with numpy syntax. Use any basic arithmetic supported by numpy arrays such as +, -, *, and along with logical operators such as >. Note that all files must have the same dimensions, but no projection checking is performed.",
    "syntax": "gdal_calc.py --calc=expression --outfile=out_filename [-A filename] [--A_band=n] [-B ...-Z filename] [other_options]",
    "parameters": [
      {
        "flag": "--outfile",
        "dataType": "String",
        "isOptional": false,
        "name": "out_filename",
        "isOutputFile": true,
        "explanation": "Output file to generate or fill."
      }
    ],
    "options": [
      {
        "flag": "--calc",
        "dataType": "String",
        "isOptional": false,
        "name": "expression",
        "explanation": "Calculation in gdalnumeric syntax using +, -, /, *, or any numpy array functions (i.e. log10())."
      },
      {
        "flag": "-A",
        "dataType": "String",
        "isOptional": true,
        "name": "filename",
        "explanation": "Input gdal raster file, you can use any letter (A-Z)."
      },
      {
        "flag": "--A_band",
        "dataType": "String",
        "isOptional": true,
        "name": "A_band",
        "explanation": "Number of raster band for file A (default 1)."
      },
      {
        "flag": "--NoDataValue",
        "dataType": "Float",
        "isOptional": true,
        "name": "NoDataValue",
        "explanation": "Output nodata value (default datatype specific value)."
      },
      {
        "flag": "--type",
        "dataType": "String",
        "isOptional": true,
        "name": "datatype",
        "available_values": [
          "Int32",
          "Int16",
          "Float64",
          "UInt16",
          "Byte",
          "UInt32",
          "Float32"
        ],
        "explanation": "Output datatype, must be one of [Int32, Int16, Float64, UInt16, Byte, UInt32, Float32]."
      },
      {
        "flag": "--format",
        "dataType": "String",
        "isOptional": true,
        "name": "gdal_format",
        "explanation": "GDAL format for output file."
      },
      {
        "flag": "--creation-option",
        "dataType": "String",
        "isOptional": true,
        "name": "creation-option",
        "explanation": "Passes a creation option to the output format driver. Multiple options may be listed. See format specific documentation for legal creation options for each format."
      },
      {
        "flag": "--co",
        "dataType": "String",
        "isOptional": true,
        "name": "co",
        "explanation": "The same as creation-option."
      },
      {
        "flag": "--allBands",
        "dataType": "String",
        "isOptional": true,
        "name": "allBands",
        "explanation": "Process all bands of given raster (A-Z)."
      },
      {
        "flag": "--overwrite",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "overwrite",
        "explanation": "Overwrite output file if it already exists."
      },
      {
        "flag": "--help",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "help",
        "explanation": "how this help message and exit"
      },
      {
        "flag": "-h",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "help",
        "explanation": "The same as --help."
      },
      {
        "flag": "--debug",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "debug",
        "explanation": "Print debugging information."
      },
      {
        "flag": "--quiet",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "quiet",
        "explanation": "Suppress progress messages"
      }
    ],
    "manual_url": "https://gdal.org/programs/gdal_calc.html",
    "example": [
      "gdal_calc.py -A input1.tif -B input2.tif --outfile=result.tif --calc=\"A+B\" \ngdal_calc.py -A input.tif -B input2.tif --outfile=result.tif --calc=\"(A+B)/2\" gdal_calc.py -A input.tif --outfile=result.tif --calc=\"A*(A>0)\" --NoDataValue=0"
    ]
  },
  {
    "name": "gdal-config",
    "exec": "gdal-config",
    "summary": "Determines various information about a GDAL installation.",
    "description": "This utility script (available on Unix systems) can be used to determine\nvarious information about a GDAL installation. It is normally just used\nby configure scripts for applications using GDAL but can be queried by\nan end user.",
    "syntax": "gdal-config [OPTIONS] Options : [--prefix [= DIR]] [--libs] [--cflags] [--version] [--ogr-enabled] [--formats]",
    "parameters": [],
    "options": [
      {
        "flag": "--prefix",
        "dataType": "String",
        "isOptional": true,
        "name": "prefixDir",
        "explanation": "the top level directory for the GDAL installation. \n"
      },
      {
        "flag": "--libs",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "libs",
        "explanation": "The libraries and link directives required to use GDAL. \n"
      },
      {
        "flag": "--cflags",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "cflags",
        "explanation": "The include and macro definition required to compiled modules using\nGDAL. \n"
      },
      {
        "flag": "--version",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "version",
        "explanation": "Reports the GDAL version. \n"
      },
      {
        "flag": "--ogr-enabled",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "ogrenabled",
        "explanation": "Reports \u201cyes\u201d or \u201cno\u201d to standard output depending on whether OGR is\nbuilt into GDAL. \n"
      },
      {
        "flag": "--formats",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "formats",
        "explanation": "Reports which formats are configured into GDAL to stdout. \n"
      }
    ],
    "manual_url": "https://gdal.org/programs/gdal-config.html",
    "example": []
  },
  {
    "name": "gdal_pansharpen.py",
    "exec": "gdal_pansharpen.py",
    "summary": "Perform a pansharpen operation.",
    "description": "The gdal_pansharpen.py  script performs a pan-sharpening operation. It\ncan create a \u201cclassic\u201d output dataset (such as GeoTIFF), or a VRT\ndataset describing the pan-sharpening operation. More details can be found in the  Pansharpened VRT  section.",
    "syntax": "gdal_pansharpen [--help -general] pan_dataset { spectral_dataset [, band=num]}+ out_dataset [-of format] [-b band] * [-w weight_val] * [-r { nearest , bilinear , cubic , cubicspline , lanczos , average }] [-threads { ALL_CPUS | number }] [-bitdepth val] [-nodata val] [-spat_adjust { union , intersection , none , nonewithoutwarning }] [-co NAME=VALUE] * [-q]",
    "parameters": [
      {
        "flag": null,
        "dataType": "String",
        "isOptional": false,
        "name": "pan_dataset",
        "isInputFile": true,
        "explanation": "Dataset with panchromatic band (first band will be used). \n"
      },
      {
        "flag": null,
        "dataType": "String",
        "isOptional": false,
        "name": "out_dataset",
        "isOutputFile": true,
        "explanation": "output dataset"
      }
    ],
    "options": [
      {
        "flag": "-r",
        "dataType": "String",
        "isOptional": false,
        "input_pattern": "{nearest,bilinear,cubic (default),cubicspline,lanczos,average}",
        "available_values": [
          "nearest",
          "bilinear",
          "cubic",
          "cubicspline",
          "lanczos",
          "average"
        ],
        "name": "r",
        "defaultValue": "cubic",
        "explanation": "Select a resampling algorithm. \n"
      },
      {
        "flag": "-threads",
        "dataType": "String",
        "isOptional": false,
        "input_pattern": "{ALL_CPUS,number}",
        "available_values": [
          "ALL_CPUS",
          "number"
        ],
        "name": "threads",
        "explanation": "Specify number of threads to use to do the resampling and\npan-sharpening itself. Can be an integer number or ALL_CPUS. \n"
      },
      {
        "flag": "-spat_adjust",
        "dataType": "String",
        "isOptional": false,
        "input_pattern": "{union(default),intersection,none,nonewithoutwarning}",
        "available_values": [
          "union",
          "intersection",
          "none",
          "nonewithoutwarning"
        ],
        "defaultValue": "union",
        "name": "spat_adjust",
        "explanation": "Select behaviour when bands have not the same extent. See\n SpatialExtentAdjustment  documentation in  VRT\ntutorial \n"
      },
      {
        "flag": "-of",
        "dataType": "String",
        "isOptional": true,
        "name": "format",
        "explanation": "Select the output format. Starting with GDAL 2.3, if not specified,\nthe format is guessed from the extension (previously was  GTiff ). Use\nthe short format name.  VRT  can also be used. \n"
      },
      {
        "flag": "-b",
        "dataType": "Integer",
        "isOptional": true,
        "name": "band",
        "explanation": "Select band  band  from the input spectral bands for output. Bands\nare numbered from 1 in the order spectral bands are specified.\nMultiple  -b  switches may be used. When no -b switch is used, all\ninput spectral bands are set for output. \n"
      },
      {
        "flag": "-w",
        "dataType": "Float",
        "isOptional": true,
        "name": "weight_val",
        "explanation": "Specify a weight for the computation of the pseudo panchromatic\nvalue. There must be as many -w switches as input spectral bands. \n"
      },
      {
        "flag": "-bitdepth",
        "dataType": "Integer",
        "isOptional": true,
        "name": "bitdepth",
        "explanation": "Specify the bit depth of the panchromatic and spectral bands (e.g.\n12). If not specified, the NBITS metadata item from the panchromatic\nband will be used if it exists. \n"
      },
      {
        "flag": "-nodata",
        "dataType": "Float",
        "isOptional": true,
        "name": "nodata",
        "explanation": "Specify nodata value for bands. Used for the resampling and\npan-sharpening computation itself. If not set, deduced from the\ninput bands, provided they have a consistent setting. \n"
      },
      {
        "flag": "-co",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "<NAME=VALUE>",
        "name": "co",
        "explanation": "Many formats have one or more optional creation options that can be\nused to control particulars about the file created. For instance,\nthe GeoTIFF driver supports creation options to control compression,\nand whether the file should be tiled. \n The creation options available vary by format driver, and some\nsimple formats have no creation options at all. A list of options\nsupported for a format can be listed with the\n \u2013formats \ncommand line option but the documentation for the format is the\ndefinitive source of information on driver creation options.\nSee  Raster drivers  format\nspecific documentation for legal creation options for each format. \n"
      },
      {
        "flag": "-q",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "q",
        "explanation": "Suppress progress monitor and other non-error output. \n"
      },
      {
        "flag": "spectral_dataset",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "[band=num]",
        "name": "spectral_dataset",
        "explanation": "Defines the target coordinate system.\nThis coordinate system will be written to the dataset.\nIf the empty string or None is specified, then the existing\ncoordinate system will be removed (for TIFF/GeoTIFF, might not be well\nsupported besides that). \n"
      }
    ],
    "manual_url": "https://gdal.org/programs/gdal_pansharpen.html",
    "example": [
      "gdal_pansharpen.py panchro.tif multispectral.tif pansharpened_out.tif"
    ]
  },
  {
    "name": "gdal_edit",
    "exec": "gdal_edit.py",
    "summary": "Edit in place various information of an existing GDAL dataset.",
    "description": "The gdal_edit.py script can be used to edit in place various information of an existing GDAL dataset (projection, geotransform, nodata, metadata).Depending on the format, older values of the updated information might still be found in the file in a “ghost” state, even if no longer accessible through the GDAL API. This is for example the case of the GTiff – GeoTIFF File Format format (this is not a exhaustive list). \n The -a_ullr, -tr and -unsetgt options are exclusive.\n\nThe -unsetstats and either -stats or -approx_stats options are exclusive.",
    "syntax": "gdal_edit [--help-general] [-ro] [-a_srs srs_def] [-a_ullr ulx uly lrx lry]\n  [-tr xres yres] [-unsetgt] [-unsetrpc] [-a_nodata value] [-unsetnodata]\n        [-unsetstats] [-stats] [-approx_stats]\n        [-setstats min max mean stddev]\n        [-scale value] [-offset value]\n        [-colorinterp_X red|green|blue|alpha|gray|undefined]*\n        [-gcp pixel line easting northing [elevation]]*\n        [-unsetmd] [-oo NAME=VALUE]* [-mo \"META-TAG=VALUE\"]*  datasetname",
    "parameters": [
      {
        "flag": null,
        "dataType": "String",
        "isOptional": false,
        "name": "datasetname",
        "isInputFile": true,
        "explanation": "Dataset name"
      }
    ],
    "options": [
      {
        "flag": "--help-general",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "help-general",
        "explanation": "Gives a brief usage message for the generic GDAL commandline options and exit."
      },
      {
        "flag": "-tr",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "<xres> <yres>",
        "name": "target_resolution",
        "explanation": "Set target resolution. The values must be expressed in georeferenced units.\nBoth must be positive values. \n"
      },
      {
        "flag": "-unsetgt",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "unsetgt",
        "explanation": "Remove the georeference information. \n"
      },
      {
        "flag": "-unsetrpc",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "unsetrpc",
        "explanation": "Remove RPC information. \n \n New in version 2.4. \n \n"
      },
      {
        "flag": "-unsetstats",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "unsetstats",
        "explanation": "Remove band statistics information. \n \n New in version 2.0. \n \n"
      },
      {
        "flag": "-stats",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "stats",
        "explanation": "Calculate and store band statistics. \n \n New in version 2.0. \n \n"
      },
      {
        "flag": "-approx_stats",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "approx_stats",
        "explanation": "Calculate and store approximate band statistics. \n \n New in version 2.0. \n \n"
      },
      {
        "flag": "-a_nodata",
        "dataType": "Float",
        "isOptional": true,
        "name": "a_nodata",
        "explanation": "Assign a specified nodata value to output bands. \n"
      },
      {
        "flag": "-unsetnodata",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "unsetnodata",
        "explanation": "Remove existing nodata values. \n \n New in version 2.1. \n \n"
      },
      {
        "flag": "-scale",
        "dataType": "Integer",
        "isOptional": true,
        "name": "scale",
        "explanation": "Assign a specified scale value to output bands.\nIf a single scale value is provided it will be set for all bands.\nAlternatively one scale value per band can be provided, in which case\nthe number of scale values must match the number of bands.\nIf no scale is needed, it it recommended to set the value to 1.\nScale and Offset are generally used together. For example, scale and\noffset might be used to store elevations in a unsigned 16bit integer\nfile with a precision of 0.1, and starting from -100. True values\nwould be calculated as: true_value = (pixel_value * scale) + offset \n \n Note \n These values can be applied using -unscale during a  gdal_translate  run. \n \n \n New in version 2.2. \n \n"
      },
      {
        "flag": "-offset",
        "dataType": "Integer",
        "isOptional": true,
        "name": "offset",
        "explanation": "Assign a specified offset value to output bands. If a single offset value is provided it will be set for all bands.\nAlternatively one offset value per band can be provided, in which case the number of offset values must match the number of bands.\nIf no offset is needed, it recommended to set the value to 0.\nFor more see scale. \n \n New in version 2.2. \n \n-.. option:: colorinterp_X red|green|blue|alpha|gray|undefined\n\n    Change the color interpretation of band X (where X is a valid band number, starting at 1).\n\n    New in version 2.3.\n"
      },
      {
        "flag": "-unsetmd",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "unsetmd",
        "explanation": "Remove existing metadata (in the default metadata domain).\nCan be combined with  -mo . \n \n New in version 2.0. \n \n"
      },
      {
        "flag": "-mo",
        "dataType": "String",
        "input_pattern": "META-TAG=VALUE",
        "isOptional": true,
        "name": "mo",
        "explanation": "Passes a metadata key and value to set on the output dataset if possible. This metadata is added to the existing metadata items, unless -unsetmd is also specified."
      },
      {
        "flag": "-oo",
        "dataType": "String",
        "input_pattern": "NAME=VALUE",
        "isOptional": true,
        "name": "oo",
        "explanation": " Open option (format specific).\n\n    New in version 2.0.\n"
      },
      {
        "flag": "-ro",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "ro",
        "explanation": "Open the dataset in read-only. Might be useful for drivers refusing to use the dataset in update-mode. In which case, updated information will go into PAM .aux.xml files.\n\n    New in version 1.11.\n"
      },
      {
        "flag": "-a_srs",
        "dataType": "String",
        "isOptional": true,
        "name": "srs_def",
        "explanation": "Defines the target coordinate system. This coordinate system will be written to the dataset. If the empty string or None is specified, then the existing coordinate system will be removed (for TIFF/GeoTIFF, might not be well supported besides that)."
      },
      {
        "flag": "-a_ullr",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "ulx uly lrx lry",
        "name": "a_ullr",
        "explanation": "Assign/override the georeferenced bounds of the dataset."
      },
      {
        "flag": "-gcp",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "pixel line easting northing [elevation]",
        "name": "gcp",
        "explanation": "Add the indicated ground control point to the dataset. This option may be provided multiple times to provide a set of GCPs."
      }
    ],
    "manual_url": "https://gdal.org/programs/gdal_edit.html",
    "example": [
      "gdal_edit -mo DATUM=WGS84 -mo PROJ=GEODETIC -a_ullr 7 47 8 46 test.ecw gdal_edit -scale 1e3 1e4 -offset 0 10 twoBand.tif"
    ]
  },
  {
    "name": "gdalwarp",
    "exec": "gdalwarp",
    "summary": "Image reprojection and warping utility",
    "description": "The gdalwarp utility is an image mosaicing, reprojection and warping\nutility. The program can reproject to any supported projection,\nand can also apply GCPs stored with the image if the image is \u201craw\u201d\nwith control information.",
    "syntax": "gdalwarp [--help -general] [--formats] [-s_srs srs_def] [-t_srs srs_def] [-ct string] [-to \"NAME=VALUE\"] * [-novshiftgrid] [-order n | -tps | -rpc | -geoloc] [-et err_threshold] [-refine_gcps tolerance [minimum_gcps]] [-te xmin ymin xmax ymax] [-te_srs srs_def] [-tr xres yres] [-tap] [-ts width height] [-ovr level | AUTO | AUTO -n | NONE] [-wo \"NAME=VALUE\"] [-ot Byte / Int16 /...] [-wt Byte / Int16] [-srcnodata \"value [value...]\"] [-dstnodata \"value [value...]\"] [-srcalpha |-nosrcalpha] [-dstalpha] [-r resampling_method] [-wm memory_in_mb] [-multi] [-q] [-cutline datasource] [-cl layer] [-cwhere expression] [-csql statement] [-cblend dist_in_pixels] [-crop_to_cutline] [-of format] [-co \"NAME=VALUE\"] * [-overwrite] [-nomd] [-cvmd meta_conflict_value] [-setci] [-oo NAME=VALUE] * [-doo NAME=VALUE] * srcfile * dstfile",
    "parameters": [
      {
        "flag": null,
        "dataType": "String",
        "isOptional": false,
        "name": "srcfile",
        "isInputFile": true,
        "explanation": "The source file name(s). \n"
      },
      {
        "flag": null,
        "dataType": "String",
        "isOptional": false,
        "name": "dstfile",
        "isOutputFile": true,
        "explanation": "The destination file name. \n"
      }
    ],
    "options": [
      {
        "flag": "--help-general",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "help-general",
        "explanation": "Gives a brief usage message for the generic GDAL commandline options and exit."
      },
      {
        "flag": "-s_srs",
        "dataType": "String",
        "isOptional": true,
        "name": "s_srs",
        "explanation": "Set source spatial reference. \n The coordinate systems that can be passed are anything supported by the\nOGRSpatialReference.SetFromUserInput() call, which includes EPSG PCS and GCSes\n(i.e. EPSG:4296), PROJ.4 declarations (as above), or the name of a .prj file\ncontaining well known text. Starting with GDAL 2.2, if the SRS has an explicit\nvertical datum that points to a PROJ.4 geoidgrids, and the input dataset is a\nsingle band dataset, a vertical correction will be applied to the values of the\ndataset. \n"
      },
      {
        "flag": "-t_srs",
        "dataType": "String",
        "isOptional": true,
        "name": "target_srs_def",
        "explanation": "Set target spatial reference. \n The coordinate systems that can be passed are anything supported by the\nOGRSpatialReference.SetFromUserInput() call, which includes EPSG PCS and GCSes\n(i.e. EPSG:4296), PROJ.4 declarations (as above), or the name of a .prj file\ncontaining well known text. Starting with GDAL 2.2, if the SRS has an explicit\nvertical datum that points to a PROJ.4 geoidgrids, and the input dataset is a\nsingle band dataset, a vertical correction will be applied to the values of the dataset. \n"
      },
      {
        "flag": "-ct",
        "dataType": "String",
        "isOptional": true,
        "name": "ct",
        "explanation": "A PROJ string (single step operation or multiple step string starting with +proj=pipeline), a WKT2 string describing a CoordinateOperation, or a urn:ogc:def:coordinateOperation:EPSG::XXXX URN overriding the default transformation from the source to the target CRS. It must take into account the axis order of the source and target CRS.\n\n    New in version 3.0.\n"
      },
      {
        "flag": "-to",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "<NAME=VALUE>",
        "name": "to",
        "explanation": "Set a transformer option suitable to pass to GDALCreateGenImgProjTransformer2()."
      },
      {
        "flag": "-novshiftgrid",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "novshiftgrid",
        "explanation": "    Disable the use of vertical datum shift grids when one of the source or target SRS has an explicit vertical datum, and the input dataset is a single band dataset.\n\n    New in version 2.2.\n"
      },
      {
        "flag": "-order",
        "dataType": "Integer",
        "isOptional": true,
        "name": "order",
        "explanation": "order of polynomial used for warping (1 to 3). The default is to select a polynomial order based on the number of GCPs."
      },
      {
        "flag": "-tps",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "tps",
        "explanation": "Force use of thin plate spline transformer based on available GCPs."
      },
      {
        "flag": "-rpc",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "rpc",
        "explanation": "Force use of RPCs."
      },
      {
        "flag": "-geoloc",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "geoloc",
        "explanation": "Force use of Geolocation Arrays."
      },
      {
        "flag": "-tps",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "tps",
        "explanation": "Force use of thin plate spline transformer based on available GCPs."
      },
      {
        "flag": "-et",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "<err_threshold>",
        "name": "err_threshold",
        "explanation": "Error threshold for transformation approximation (in pixel units - defaults to 0.125, unless, starting with GDAL 2.1, the RPC_DEM warping option is specified, in which case, an exact transformer, i.e. err_threshold=0, will be used)."
      },
      {
        "flag": "-refine_gcps",
        "dataType": "String",
        "isOptional": true,
        "name": "tolerance minimum_gcps",
        "explanation": "Refines the GCPs by automatically eliminating outliers. Outliers will be eliminated until minimum_gcps are left or when no outliers can be detected. The tolerance is passed to adjust when a GCP will be eliminated. Not that GCP refinement only works with polynomial interpolation. The tolerance is in pixel units if no projection is available, otherwise it is in SRS units. If minimum_gcps is not provided, the minimum GCPs according to the polynomial model is used."
      },
      {
        "flag": "-te",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "<xmin ymin xmax ymax>",
        "name": "te",
        "explanation": "Set georeferenced extents of output file to be created (in target SRS by default, or in the SRS specified with -te_srs)"
      },
      {
        "flag": "-te_srs",
        "dataType": "String",
        "isOptional": true,
        "name": "te_srs",
        "explanation": "Specifies the SRS in which to interpret the coordinates given with -te. The <srs_def> may be any of the usual GDAL/OGR forms, complete WKT, PROJ.4, EPSG:n or a file containing the WKT. This must not be confused with -t_srs which is the target SRS of the output dataset. -te_srs is a convenience e.g. when knowing the output coordinates in a geodetic long/lat SRS, but still wanting a result in a projected coordinate system."
      },
      {
        "flag": "-tr",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "<xres> <yres>",
        "name": "te",
        "explanation": "Sse output file resolution (in target georeferenced units)\n"
      },
      {
        "flag": "-tap",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "tap",
        "explanation": "(target aligned pixels) align the coordinates of the extent of the output\nfile to the values of the  -tr , such that the aligned extent\nincludes the minimum extent. \n"
      },
      {
        "flag": "-ts",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "<width> <height>",
        "name": "ts",
        "explanation": "Set output file size in pixels and lines. If width or height is set to 0,\nthe other dimension will be guessed from the computed resolution. Note that\n -ts  cannot be used with  -tr \n"
      },
      {
        "flag": "-ovr",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "<level|AUTO|AUTO-n|NONE>",
        "available_values": [
          "level",
          "AUTO",
          "AUTO-n",
          "NONE"
        ],
        "name": "ovr",
        "explanation": "To specify which overview level of source files must be used. The default choice,\nAUTO, will select the overview level whose resolution is the closest to the\ntarget resolution. Specify an integer value (0-based, i.e. 0=1st overview level)\nto select a particular level. Specify AUTO-n where n is an integer greater or\nequal to 1, to select an overview level below the AUTO one. Or specify NONE to\nforce the base resolution to be used (can be useful if overviews have been\ngenerated with a low quality resampling method, and the warping is done using a\nhigher quality resampling method). \n"
      },
      {
        "flag": "-wo",
        "dataType": "String",
        "isOptional": false,
        "input_pattern": "`\"NAME=VALUE\"`",
        "name": "wo",
        "explanation": "Set a warp option.  The  GDALWarpOptions::papszWarpOptions  docs show all options.\nMultiple  -wo  options may be listed. \n"
      },
      {
        "flag": "-ot",
        "dataType": "String",
        "isOptional": true,
        "name": "type",
        "available_values": [
          "Byte",
          "Int16",
          "UInt16",
          "UInt32",
          "Int32",
          "Float32",
          "Float64",
          "CInt16",
          "CInt32",
          "CFloat32",
          "CFloat64"
        ],
        "explanation": "Force the output image bands to have a specific type. Use type names\n(i.e. Byte, Int16,\u2026) \n"
      },
      {
        "flag": "-wt",
        "dataType": "String",
        "isOptional": true,
        "name": "type",
        "explanation": "Working pixel data type. The data type of pixels in the source image and destination image buffers. \n"
      },
      {
        "flag": "-r",
        "dataType": "String",
        "isOptional": true,
        "name": "resampling_method",
        "available_values": [
          "near",
          "bilinear",
          "cubic",
          "cubicspline",
          "lanczos",
          "average",
          "mode",
          "max",
          "min",
          "med",
          "q1",
          "q3"
        ],
        "explanation": "Resampling method to use. Available methods are: \n near : nearest neighbour resampling (default, fastest algorithm, worst interpolation quality). \n bilinear : bilinear resampling. \n cubic : cubic resampling. \n cubicspline : cubic spline resampling. \n lanczos : Lanczos windowed sinc resampling. \n average : average resampling, computes the average of all non-NODATA contributing pixels. \n mode : mode resampling, selects the value which appears most often of all the sampled points. \n max : maximum resampling, selects the maximum value from all non-NODATA contributing pixels. \n min : minimum resampling, selects the minimum value from all non-NODATA contributing pixels. \n med : median resampling, selects the median value of all non-NODATA contributing pixels. \n q1 : first quartile resampling, selects the first quartile value of all non-NODATA contributing pixels. \n q3 : third quartile resampling, selects the third quartile value of all non-NODATA contributing pixels. \n"
      },
      {
        "flag": "-srcnodata",
        "dataType": "Float",
        "isOptional": true,
        "input_pattern": "<value [value...]>",
        "name": "srcnodata",
        "explanation": "Set nodata masking values for input bands (different values can be supplied for each band).  If more than one value is supplied all values should be quoted to keep them\ntogether as a single operating system argument.  Masked values will not be\nused in interpolation.  Use a value of  None  to ignore intrinsic nodata settings on the source dataset. \n"
      },
      {
        "flag": "-dstnodata",
        "dataType": "Float",
        "isOptional": true,
        "input_pattern": "<value [value...]>",
        "name": "dstnodata",
        "explanation": "Set nodata values for output bands (different values can be supplied for each band). If more than one value is supplied all values should be quoted to keep them together as a single operating system argument. New files will be initialized to this value and if possible the nodata value will be recorded in the output file. Use a value of None to ensure that nodata is not defined. If this argument is not used then nodata values will be copied from the source dataset."
      },
      {
        "flag": "-srcalpha",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "srcalpha",
        "explanation": "Force the last band of a source image to be considered as a source alpha band."
      },
      {
        "flag": "-nosrcalpha",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "nosrcalpha",
        "explanation": "    Prevent the alpha band of a source image to be considered as such (it will be warped as a regular band)\n\n    New in version 2.2.\n"
      },
      {
        "flag": "-dstalpha",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "dstalpha",
        "explanation": "Create an output alpha band to identify nodata (unset/transparent) pixels.\n"
      },
      {
        "flag": "-wm",
        "dataType": "Integer",
        "isOptional": true,
        "name": "memory_in_mb",
        "explanation": "Set the amount of memory that the warp API is allowed to use for caching. The value is interpreted as being in megabytes if the value is less than 10000. For values >=10000, this is interpreted as bytes."
      },
      {
        "flag": "-multi",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "multi",
        "explanation": "Use multithreaded warping implementation. Two threads will be used to process chunks of image and perform input/output operation simultaneously. Note that computation is not multithreaded itself. To do that, you can use the -wo NUM_THREADS=val/ALL_CPUS option, which can be combined with -multi"
      },
      {
        "flag": "-q",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "quiet",
        "explanation": "Be quiet."
      },
      {
        "flag": "-of",
        "dataType": "String",
        "isOptional": true,
        "name": "format",
        "explanation": "Select the output format. Starting with GDAL 2.3, if not specified, the format is guessed from the extension (previously was GTiff). Use the short format name."
      },
      {
        "flag": "-co",
        "dataType": "Boolean",
        "isOptional": true,
        "input_pattern": "<NAME=VALUE>",
        "name": "co",
        "explanation": "    Many formats have one or more optional creation options that can be used to control particulars about the file created. For instance, the GeoTIFF driver supports creation options to control compression, and whether the file should be tiled.\n\n    The creation options available vary by format driver, and some simple formats have no creation options at all. A list of options supported for a format can be listed with the –formats command line option but the documentation for the format is the definitive source of information on driver creation options. See Raster drivers format specific documentation for legal creation options for each format.\n"
      },
      {
        "flag": "-cutline",
        "dataType": "String",
        "isOptional": true,
        "name": "datasource",
        "explanation": "Enable use of a blend cutline from the name OGR support datasource."
      },
      {
        "flag": "-cl",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "layername",
        "explanation": "    Select the named layer from the cutline datasource.\n"
      },
      {
        "flag": "-cwhere",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "cwhere_expression",
        "explanation": "Restrict desired cutline features based on attribute query."
      },
      {
        "flag": "-csql",
        "dataType": "String",
        "isOptional": true,
        "name": "query",
        "explanation": "Select cutline features using an SQL query instead of from a layer with  -cl . \n"
      },
      {
        "flag": "-cblend",
        "dataType": "String",
        "isOptional": true,
        "name": "distance",
        "explanation": "Set a blend distance to use to blend over cutlines (in pixels). \n"
      },
      {
        "flag": "-crop_to_cutline",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "crop_to_cutline",
        "explanation": "Crop the extent of the target dataset to the extent of the cutline. \n"
      },
      {
        "flag": "-overwrite",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "overwrite",
        "explanation": "Overwrite the target dataset if it already exists. \n"
      },
      {
        "flag": "-nomd",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "nomd",
        "explanation": "Do not copy metadata. Without this option, dataset and band metadata (as well as some band information) will be copied from the first source dataset.\nItems that differ between source datasets will be set to * (see  -cvmd  option). \n"
      },
      {
        "flag": "-cvmd",
        "dataType": "String",
        "isOptional": true,
        "name": "meta_conflict_value",
        "explanation": "Value to set metadata items that conflict between source datasets\n(default is \u201c*\u201d). Use \u201c\u201d to remove conflicting items. \n"
      },
      {
        "flag": "-setci",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "setci",
        "explanation": "Set the color interpretation of the bands of the target dataset from the source dataset. \n"
      },
      {
        "flag": "-oo",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "<NAME=VALUE>",
        "name": "oo",
        "explanation": "Dataset open option (format specific) \n"
      },
      {
        "flag": "-doo",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "<NAME=VALUE>",
        "name": "doo",
        "explanation": "Output dataset open option (format specific) \n \n New in version 2.1. \n \n"
      }
    ],
    "manual_url": "https://gdal.org/programs/gdalwarp.html",
    "example": [
      "gdalwarp -t_srs '+proj=utm +zone=11 +datum=WGS84' -overwrite raw_spot.tif utm11.tif"
    ]
  },
  {
    "name": "gdalsrsinfo",
    "exec": "gdalsrsinfo",
    "summary": "Lists info about a given SRS in number of formats (WKT, PROJ.4, etc.)",
    "description": "The  gdalsrsinfo  utility reports information about a given SRS from one of the following: The filename of a dataset supported by GDAL/OGR which contains SRS information\nAny of the usual GDAL/OGR forms (complete WKT, PROJ.4, EPSG:n or a file containing the SRS)",
    "syntax": "gdalsrsinfo [--single -line] [-V] [-e][-o out_type] <srs_def>",
    "parameters": [
      {
        "flag": null,
        "dataType": "String",
        "isOptional": false,
        "name": "srs_def",
        "isInputFile": true,
        "explanation": "may be the filename of a dataset supported by GDAL/OGR from which to extract SRS information OR any of the usual GDAL/OGR forms (complete WKT, PROJ.4, EPSG:n or a file containing the SRS)"
      }
    ],
    "options": [
      {
        "flag": "--single-line",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "singleline",
        "explanation": "Print WKT on single line"
      },
      {
        "flag": "-V",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "v",
        "explanation": "Validate SRS"
      },
      {
        "flag": "-e",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "epsg",
        "explanation": "Search for EPSG number(s) corresponding to SRS \n"
      },
      {
        "flag": "-o",
        "dataType": "String",
        "isOptional": true,
        "name": "out_type",
        "explanation": "Output types: \n  default: proj4 and wkt (default option)  \n  all: all options available  \n  wkt_all: all wkt options available  \n  PROJJSON: PROJJSON string (GDAL >= 3.1 and PROJ >= 6.2)  \n  proj4: PROJ.4 string  \n  wkt1: OGC WKT format (full)  \n  wkt_simple: OGC WKT 1 (simplified)  \n  wkt_noct: OGC WKT 1 (without OGC CT params)  \n  wkt_esri: ESRI WKT format  \n  wkt: Latest WKT version supported, currently wkt2_2018  \n  wkt2: Latest WKT2 version supported, currently wkt2_2018  \n  wkt2_2015: OGC WKT2:2015  \n  wkt2_2018: OGC WKT2:2018  \n  mapinfo: Mapinfo style CoordSys format  \n  xml: XML format (GML based)\n",
        "available_values": [
          "default",
          "all",
          "wkt_all",
          "PROJJSON",
          "proj4",
          "wkt1",
          "wkt_simple",
          "wkt_noct",
          "wkt_esri",
          "wkt",
          "wkt2",
          "wkt2_2015",
          "wkt2_2018",
          "mapinfo",
          "xml"
        ]
      }
    ],
    "manual_url": "https://gdal.org/programs/gdalsrsinfo.html",
    "example": [
      "gdalsrsinfo -o proj4 osr/data/lcc_esri.prj",
      "gdalsrsinfo -o proj4 landsat.tif",
      "gdalsrsinfo  -o wkt \"EPSG:32722\""
    ]
  },
  {
    "name": "gdalmove",
    "exec": "gdalmove",
    "summary": "Transform georeferencing of raster file in place.",
    "description": "The  gdalmove.py  script transforms the bounds of a raster file from one coordinate system to another, and then updates the coordinate system and\ngeotransform of the file. This is done without altering pixel values at all. It\nis loosely similar to using gdalwarp to transform an image but avoiding the\nresampling step in order to avoid image damage. It is generally only suitable\nfor transformations that are effectively linear in the area of the file. If no error threshold value ( -et ) is provided then the file is not\nactually updated, but the errors that would be incurred are reported. If\n -et  is provided then the file is only modify if the apparent error\nbeing introduced is less than the indicate threshold (in pixels). Currently the transformed geotransform is computed based on the transformation\nof the top left, top right, and bottom left corners. A reduced overall error\ncould be produced using a least squares fit of at least all four corner points.",
    "syntax": "gdalmove.py [-s_srs srs_defn] -t_srs <srs_defn> [-et max_pixel_err] <target_file>",
    "parameters": [
      {
        "flag": null,
        "dataType": "String",
        "isOptional": false,
        "isInputFile": true,
        "name": "target_file",
        "explanation": "The file to be operated on. To update this must be a file format that supports in place updates of the geotransform and SRS."
      }
    ],
    "options": [
      {
        "flag": "-s_srs",
        "dataType": "String",
        "isOptional": true,
        "name": "srs_defn",
        "explanation": "Override the coordinate system of the file with the indicated coordinate system definition. Optional. If not provided the source coordinate system\nis read from the source file. \n"
      },
      {
        "flag": "-t_srs",
        "dataType": "String",
        "isOptional": true,
        "name": "srs_defn",
        "explanation": "Defines the target coordinate system. This coordinate system will be written to the file after an update. \n"
      },
      {
        "flag": "-et",
        "dataType": "String",
        "isOptional": true,
        "name": "max_pixel_err",
        "explanation": "The error threshold (in pixels) beyond which the file will not be updated.\nIf not provided no update will be applied to the file, but errors will be\nreported. \n"
      }
    ],
    "manual_url": "https://gdal.org/programs/gdalmove.html",
    "example": []
  },
  {
    "name": "gnmmanage",
    "exec": "gnmmanage",
    "summary": "Manages networks",
    "description": "The  gnmmanage  program can perform various managing operations on geographical networks in GDAL. In addition to creating and deleting networks this includes capabilities of managing network\u2019s features, topology and rules.",
    "syntax": "gnmmanage [--help][-q][-quiet][--long -usage] [info] [create [-f format_name] [-t_srs srs_name] [-dsco NAME=VALUE] ...] [import src_dataset_name] [-l layer_name] [connect gfid_src gfid_tgt gfid_con [-c cost] [-ic inv_cost] [-dir dir]] [disconnect gfid_src gfid_tgt gfid_con] [rule rule_str] [autoconnect tolerance] [delete] [change [-bl gfid][-unbl gfid][-unblall]] gnm_name [layer [layer ...]]",
    "parameters": [
      {
        "flag": "import",
        "dataType": "String",
        "isOptional": true,
        "isInputFile": true,
        "name": "src_dataset_name",
        "explanation": "Import layer with dataset name to copy."
      },
      {
        "flag": "gnm_name",
        "dataType": "String",
        "isOptional": false,
        "name": "gnm_name",
        "isOutputFile": true,
        "explanation": "The network to work with (path and name). \n"
      }
    ],
    "options": [
      {
        "flag": "-info",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "info",
        "explanation": "Different information about network: system and class layers, network metadata, network spatial reference. \n"
      },
      {
        "flag": "create",
        "dataType": "Boolean",
        "isOptional": true,
        "input_pattern": "[-f <format_name>] [-t_srs <srs_name>] [-dsco NAME=VALUE]",
        "name": "create",
        "explanation": "Create network. \n \n \n -f  <format_name> \u00b6 \n Output file format name. \n \n\n \n \n -t_srs  <srs_name> \u00b6 \n Spatial reference input. \n \n\n \n \n -dsco  NAME=VALUE \u00b6 \n Network creation option set as pair name=value. \n \n\n"
      },
      {
        "flag": "-f",
        "dataType": "String",
        "isOptional": true,
        "name": "format_name",
        "explanation": "Output file format name. \n"
      },
      {
        "flag": "-t_srs",
        "dataType": "String",
        "isOptional": true,
        "name": "gfid",
        "explanation": "Block feature before the main operation. Blocking features are saved in the special layer. \n"
      },
      {
        "flag": "-dsco",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "NAME=VALUE",
        "name": "dsco",
        "explanation": "Network creation option set as pair name=value."
      },
      {
        "flag": "-l",
        "dataType": "String",
        "isOptional": true,
        "name": "layer_name",
        "explanation": "Layer name in dataset. If unset, 0 layer is copied."
      },
      {
        "flag": "-c",
        "dataType": "String",
        "isOptional": true,
        "name": "cost",
        "explanation": "Cost / weight"
      },
      {
        "flag": "-ic",
        "dataType": "String",
        "isOptional": true,
        "name": "invcost",
        "explanation": "Inverse cost"
      },
      {
        "flag": "dir",
        "dataType": "String",
        "isOptional": true,
        "name": "dir",
        "explanation": "Direction of the edge."
      },
      {
        "flag": "-rule",
        "dataType": "String",
        "isOptional": true,
        "name": "rule_str",
        "explanation": "Creates a rule in the network by the given rule_str string."
      },
      {
        "flag": "-autoconnect",
        "dataType": "String",
        "isOptional": true,
        "name": "tolerance",
        "explanation": "Create topology automatically with the given double tolerance and layer names. In no layer name provided all layers of network will be used."
      },
      {
        "flag": "-delete",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "delete",
        "explanation": "Delete network."
      },
      {
        "flag": "-change",
        "dataType": "String",
        "isOptional": true,
        "name": "change",
        "input_pattern": "[-bl gfid][-unbl gfid][-unblall]",
        "explanation": "Change blocking state of network edges or vertices."
      },
      {
        "flag": "-bl",
        "dataType": "String",
        "isOptional": true,
        "name": "gfid",
        "explanation": "Block feature before the main operation. Blocking features are saved in the special layer."
      },
      {
        "flag": "-unbl",
        "dataType": "String",
        "isOptional": true,
        "name": "gfid",
        "explanation": "Unblock feature before the main operation."
      },
      {
        "flag": "-unblall",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "unblall",
        "explanation": "Unblock all blocked features before the main operation. \n"
      },
      {
        "flag": "layer",
        "dataType": "String",
        "isOptional": true,
        "name": "layer",
        "explanation": "The network layer name. \n"
      }
    ],
    "manual_url": "https://gdal.org/programs/gnmmanage.html",
    "example": ""
  },
  {
    "name": "ogrmerge",
    "exec": "ogrmerge.py",
    "summary": "Merge several vector datasets into a single one.",
    "description": "ogrmerge.py  script takes as input several vector datasets, each of them having one or several vector layers, and copy them in\na target dataset. There are essential two modes: Internally this generates a  VRT \u2013 Virtual Format  file, and if the\noutput format is not VRT, final translation is done with  ogr2ogr \nor  gdal.VectorTranslate() . So, for advanced uses, output to VRT,\npotential manual editing of it and  ogr2ogr  can be done.the default one, where each input vector layer, is copied as a\nseparate layer into the target dataset\nanother one, activated with the -single switch, where the content of\nall input vector layers is appended into a single target layer. This\nassumes that the schema of those vector layers is more or less the\nsame.",
    "syntax": "ogrmerge.py -o out_dsname src_dsname [src_dsname] * [-f format] [-single] [-nln layer_name_template] [-update | -overwrite_ds] [-append | -overwrite_layer] [-src_geom_type geom_type_name [, geom_type_name] *] [-dsco NAME=VALUE] * [-lco NAME=VALUE] * [-s_srs srs_def] [-t_srs srs_def | -a_srs srs_def] [-progress] [-skipfailures] [--help -general] [-field_strategy FirstLayer | Union | Intersection] [-src_layer_field_name name] [-src_layer_field_content layer_name_template]",
    "parameters": [
      {
        "flag": "-o",
        "dataType": "String",
        "isOptional": false,
        "name": "out_dsname",
        "isOutputFile": true,
        "explanation": "Output dataset name. Required. \n"
      },
      {
        "flag": "src_dsname",
        "dataType": "String",
        "isOptional": false,
        "name": "src_dsname",
        "isInputFile": true,
        "explanation": "One or several input vector datasets. Required \n"
      }
    ],
    "options": [
      {
        "flag": "-f",
        "dataType": "String",
        "isOptional": true,
        "name": "format",
        "explanation": "Select the output format. Starting with GDAL 2.3, if not specified, the format is guessed from the extension (previously was ESRI\nShapefile). Use the short format name \n"
      },
      {
        "flag": "-single",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "single",
        "explanation": "If specified, all input vector layers will be merged into a single one. \n"
      },
      {
        "flag": "-nln",
        "dataType": "String",
        "isOptional": true,
        "name": "layer_name_template",
        "available_values": [
          "AUTO_NAME",
          "DS_NAME",
          "DS_BASENAME",
          "DS_INDEX",
          "DS_INDEX",
          "DS_INDEX"
        ],
        "explanation": "Name of the output vector layer (in single mode, and the default is\n\u201cmerged\u201d), or template to name the output vector layers in default\nmode (the default value is  {AUTO_NAME} ). The template can be a\nstring with the following variables that will be susbstitued with a\nvalue computed from the input layer being processed: \n \n {AUTO_NAME} : equivalent to  {DS_BASENAME}_{LAYER_NAME}  if both\nvalues are different, or  {LAYER_NAME}  when they are identical\n(case of shapefile). \u2018different \n {DS_NAME} : name of the source dataset \n {DS_BASENAME} : base name of the source dataset \n {DS_INDEX} : index of the source dataset \n {LAYER_NAME} : name of the source layer \n {LAYER_INDEX} : index of the source layer \n \n"
      },
      {
        "flag": "-update",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "update",
        "explanation": "Open an existing dataset in update mode. \n"
      },
      {
        "flag": "-overwrite_ds",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "overwrite_ds",
        "explanation": "Overwrite the existing dataset if it already exists (for file based datasets) \n"
      },
      {
        "flag": "-append",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "append",
        "explanation": "Open an existing dataset in update mode, and if output layers already exist, append the content of input layers to them. \n"
      },
      {
        "flag": "-overwrite_layer",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "overwrite_layer",
        "explanation": "Open an existing dataset in update mode, and if output layers already exist, replace their content with the one of the input\nlayer. \n"
      },
      {
        "flag": "-src_geom_type",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "<geom_type_name[,geom_type_name]*]>",
        "available_values": [
          "GEOMETRY",
          "POINT",
          "LINESTRING",
          "POLYGON",
          "MULTIPOINT",
          "MULTILINESTRING",
          "MULTIPOINT",
          "GEOMETRYCOLLECTION",
          "CIRCULARSTRING",
          "CURVEPOLYGON",
          "MULTICURVE",
          "MULTISURFACE",
          "CURVE",
          "SURFACE",
          "TRIANGLE",
          "POLYHEDRALSURFACE",
          "TIN"
        ],
        "name": "src_geom_type",
        "explanation": "Only take into account input layers whose geometry type match the type(s) specified. Valid values for geom_type_name are GEOMETRY,\nPOINT, LINESTRING, POLYGON, MULTIPOINT, MULTILINESTRING, MULTIPOINT,\nGEOMETRYCOLLECTION, CIRCULARSTRING, CURVEPOLYGON, MULTICURVE,\nMULTISURFACE, CURVE, SURFACE, TRIANGLE, POLYHEDRALSURFACE and TIN. \n"
      },
      {
        "flag": "-dsco",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "<NAME=VALUE>",
        "name": "dsco",
        "explanation": "Dataset creation option (format specific) \n"
      },
      {
        "flag": "-lco",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "<NAME=VALUE>",
        "name": "lco",
        "explanation": "Layer creation option (format specific) \n"
      },
      {
        "flag": "-a_srs",
        "dataType": "String",
        "isOptional": true,
        "name": "a_srs_def",
        "explanation": "Assign an output SRS \n"
      },
      {
        "flag": "-t_srs",
        "dataType": "String",
        "isOptional": true,
        "name": "t_srs_def",
        "explanation": "Dataset creation option (format specific) \n"
      },
      {
        "flag": "-s_srs",
        "dataType": "String",
        "isOptional": true,
        "name": "s_srs",
        "explanation": "Override source SRS"
      },
      {
        "flag": "-progress",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "progress",
        "explanation": "Display progress on terminal. Only works if input layers have the “fast feature count” capability."
      },
      {
        "flag": "-skipfailures",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "skipfailures",
        "explanation": "Continue after a failure, skipping the failed feature."
      },
      {
        "flag": "-field_strategy",
        "dataType": "String",
        "isOptional": true,
        "available_values": [
          "FirstLayer",
          "Union",
          "Intersection"
        ],
        "name": "field_strategy",
        "explanation": "Only used with  -single . Determines how the schema of the target layer is built from the schemas of the input layers. May be\nFirstLayer to use the fields from the first layer found, Union to\nuse a super-set of all the fields from all source layers, or\nIntersection to use a sub-set of all the common fields from all\nsource layers. Defaults to Union. \n"
      },
      {
        "flag": "-src_layer_field_name",
        "dataType": "String",
        "isOptional": true,
        "name": "src_layer_field_name",
        "explanation": "Only used with -single. If specified, the schema of the target layer will be extended with a new field ‘name’, whose content is determined by -src_layer_field_content."
      },
      {
        "flag": "-src_layer_field_content",
        "dataType": "String",
        "isOptional": true,
        "name": "src_layer_field_content",
        "explanation": "Only used with -single. If specified, the schema of the target layer will be extended with a new field (whose name is given by -src_layer_field_name, or ‘source_ds_lyr’ otherwise), whose content is determined by layer_name_template. The syntax of layer_name_template is the same as for -nln."
      }
    ],
    "manual_url": "https://gdal.org/programs/ogrmerge.html",
    "example": [
      "ogrmerge.py -f GPKG -o merged.gpkg *.shp",
      "ogrmerge.py -single -o merged.shp france.shp germany.shp -src_layer_field_name country"
    ]
  },
  {
    "name": "gdal_fillnodata",
    "exec": "gdal_fillnodata",
    "summary": "Fill raster regions by interpolation from edges.",
    "description": "gdal_fillnodata.py  script fills selection regions (usually\nnodata areas) by interpolating from valid pixels around the edges of the area. Additional details on the algorithm are available in the\n GDALFillNodata()  docs.",
    "syntax": "gdal_fillnodata.py [-q] [-md max_distance] [-si smooth_iterations] [-o name=value] [-b band] srcfile [-nomask] [-mask filename] [-of format] [dstfile]",
    "parameters": [
      {
        "flag": null,
        "dataType": "String",
        "isOptional": false,
        "name": "srcfile",
        "isInputFile": true,
        "explanation": "The source raster file used to identify target pixels.\nOnly one band is used. \n"
      },
      {
        "flag": "-mask",
        "dataType": "String",
        "isInputFile": true,
        "isOptional": true,
        "name": "filename",
        "explanation": "Use the first band of the specified file as a validity mask (zero is\ninvalid, non-zero is valid). \n"
      },
      {
        "flag": null,
        "dataType": "String",
        "isOptional": true,
        "name": "dstfile",
        "isOutputFile": true,
        "explanation": "The new file to create with the interpolated result.\nIf not provided, the source band is updated in place. \n"
      }
    ],
    "options": [
      {
        "flag": "-q",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "q",
        "explanation": "The script runs in quiet mode. The progress monitor is suppressed and\nroutine messages are not displayed. \n"
      },
      {
        "flag": "-md",
        "dataType": "String",
        "isOptional": true,
        "name": "max_distance",
        "explanation": "The maximum distance (in pixels) that the algorithm will search out for\nvalues to interpolate. \n"
      },
      {
        "flag": "-si",
        "dataType": "Integer",
        "isOptional": true,
        "defaultValue": 0,
        "name": "smooth_iterations",
        "explanation": "The number of 3x3 average filter smoothing iterations to run after the\ninterpolation to dampen artifacts. The default is zero smoothing iterations. \n"
      },
      {
        "flag": "-o",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "name=value",
        "name": "o",
        "explanation": "Specify a special argument to the algorithm. Currently none are supported. \n"
      },
      {
        "flag": "-b",
        "dataType": "String",
        "isOptional": true,
        "name": "band",
        "explanation": "The band to operate on, by default the first band is operated on. \n"
      },
      {
        "flag": "-of",
        "dataType": "String",
        "isOptional": true,
        "name": "format",
        "defaultValue": "GeoTIFF",
        "explanation": "Select the output format. The default is  GTiff \u2013 GeoTIFF File Format .\nUse the short format name. \n"
      },
      {
        "flag": "-nomask",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "nomask",
        "explanation": "Do not use the default validity mask for the input band (such as nodata,\nor alpha masks). \n"
      }
    ],
    "manual_url": "https://gdal.org/programs/gdal_fillnodata.html",
    "example": []
  },
  {
    "name": "gdallocationinfo",
    "exec": "gdallocationinfo",
    "summary": "Raster query tool",
    "description": "The  gdallocationinfo  utility provide a mechanism to query information about\na pixel given its location in one of a variety of coordinate systems.  Several\nreporting options are provided.The location of the pixel in pixel/line space.\nThe result of a LocationInfo metadata query against the datasource.\nThis is implement for VRT files which will report the\nfile(s) used to satisfy requests for that pixel, and by the\n\n driver\nThe raster pixel value of that pixel for all or a subset of the bands.\nThe unscaled pixel value if a Scale and/or Offset apply to the band. \n This utility is intended to provide a variety of information about a pixel. Currently it reports:\n\n    The location of the pixel in pixel/line space.\n\n    The result of a LocationInfo metadata query against the datasource. This is implement for VRT files which will report the file(s) used to satisfy requests for that pixel, and by the MBTiles driver\n\n    The raster pixel value of that pixel for all or a subset of the bands.\n\n    The unscaled pixel value if a Scale and/or Offset apply to the band.\n\nThe pixel selected is requested by x/y coordinate on the command line, or read from stdin. More than one coordinate pair can be supplied when reading coordinates from stdin. By default pixel/line coordinates are expected. However with use of the -geoloc, -wgs84, or -l_srs switches it is possible to specify the location in other coordinate systems.\n\nThe default report is in a human readable text format. It is possible to instead request xml output with the -xml switch.\n\nFor scripting purposes, the -valonly and -lifonly switches are provided to restrict output to the actual pixel values, or the LocationInfo files identified for the pixel.\n\nIt is anticipated that additional reporting capabilities will be added to gdallocationinfo in the future.",
    "syntax": "gdallocationinfo [--help -general] [-xml] [-lifonly] [-valonly] [-b band] * [-overview overview_level] [-l_srs srs_def] [-geoloc] [-wgs84] [-oo NAME=VALUE] * srcfile [x y]",
    "parameters": [
      {
        "flag": null,
        "dataType": "String",
        "isOptional": false,
        "name": "srcfile",
        "isInputFile": true,
        "explanation": "The source GDAL raster datasource name. \n"
      }
    ],
    "options": [
      {
        "flag": "-xml",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "xml",
        "explanation": "The output report will be XML formatted for convenient post processing. \n"
      },
      {
        "flag": "-lifonly",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "lifonly",
        "explanation": "The only output is filenames production from the LocationInfo request\nagainst the database (i.e. for identifying impacted file from VRT). \n"
      },
      {
        "flag": "-valonly",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "valonly",
        "explanation": "The only output is the pixel values of the selected pixel on each of\nthe selected bands. \n"
      },
      {
        "flag": "-b",
        "dataType": "String",
        "isOptional": true,
        "name": "band",
        "explanation": "Selects a band to query.  Multiple bands can be listed.  By default all\nbands are queried. \n"
      },
      {
        "flag": "-overview",
        "dataType": "Integer",
        "isOptional": true,
        "name": "overview_level",
        "defaultValue": 1,
        "explanation": "Query the (overview_level)th overview (overview_level=1 is the 1st overview),\ninstead of the base band. Note that the x,y location (if the coordinate system is\npixel/line) must still be given with respect to the base band. \n"
      },
      {
        "flag": "-l_srs",
        "dataType": "String",
        "isOptional": true,
        "name": "srs_def",
        "explanation": "The coordinate system of the input x, y location. \n"
      },
      {
        "flag": "-geoloc",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "geoloc",
        "explanation": "Indicates input x,y points are in the georeferencing system of the image. \n"
      },
      {
        "flag": "-wgs84",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "wgs84",
        "explanation": "Indicates input x,y points are WGS84 long, lat. \n"
      },
      {
        "flag": "-oo",
        "dataType": "String",
        "isOptional": false,
        "input_pattern": "NAME=VALUE",
        "name": "oo",
        "explanation": "Dataset open option (format specific) \n"
      },
      {
        "flag": "x",
        "dataType": "Float",
        "isOptional": true,
        "name": "x",
        "explanation": "X location of target pixel.  By default the\ncoordinate system is pixel/line unless -l_srs, -wgs84 or -geoloc supplied. \n"
      },
      {
        "flag": "y",
        "dataType": "Float",
        "isOptional": true,
        "name": "y",
        "explanation": "Y location of target pixel.  By default the\ncoordinate system is pixel/line unless -l_srs, -wgs84 or -geoloc supplied. \n"
      }
    ],
    "manual_url": "https://gdal.org/programs/gdallocationinfo.html",
    "example": [
      "gdallocationinfo utm.tif 256 256",
      "gdallocationinfo -xml -wgs84 utm.vrt -117.5 33.75"
    ]
  },
  {
    "name": "gdal_polygonize",
    "exec": "gdal_polygonize",
    "summary": "Produces a polygon feature layer from a raster.",
    "description": "This utility creates vector polygons for all connected regions of pixels in\nthe raster sharing a common pixel value.  Each polygon is created with an\nattribute indicating the pixel value of that polygon.  A raster mask\nmay also be provided to determine which pixels are eligible for processing. The utility will create the output vector datasource if it does not already\nexist, defaulting to GML format. The utility is based on the : GDALPolygonize()  function which has additional\ndetails on the algorithm.",
    "syntax": "gdal_polygonize.py [-8] [-nomask] [-mask filename] raster_file [-b band] [-q] [-f ogr_format] out_file [layer] [fieldname]",
    "parameters": [
      {
        "flag": "-mask",
        "dataType": "String",
        "isOptional": true,
        "isInputFile": true,
        "name": "maskfile",
        "explanation": "Use the first band of the specified file as a validity mask (zero is invalid,\nnon-zero is valid). If not specified, the default validity mask for the input\nband (such as nodata, or alpha masks) will be used (unless -nomask is specified) \n"
      },
      {
        "flag": null,
        "dataType": "String",
        "isInputFile": true,
        "isOptional": false,
        "name": "raster_file",
        "explanation": "The source raster file from which polygons are derived. \n"
      },
      {
        "flag": null,
        "dataType": "String",
        "isOutputFile": true,
        "isOptional": false,
        "name": "out_file",
        "explanation": "The destination vector file to which the polygons will be written. \n"
      }
    ],
    "options": [
      {
        "flag": "-8",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "eight connectedness",
        "explanation": "Use 8 connectedness. Default is 4 connectedness. \n"
      },
      {
        "flag": "-nomask",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "nomask",
        "explanation": "Do not use the default validity mask for the input band (such as nodata, or\nalpha masks). \n"
      },
      {
        "flag": "-b",
        "dataType": "String",
        "isOptional": true,
        "name": "band",
        "explanation": "The band on <raster_file> to build\nthe polygons from. Starting with GDAL 2.2, the value can also be set to \u201cmask\u201d,\nto indicate that the mask band of the first band must be used (or\n\u201cmask,band_number\u201d for the mask of a specified band) \n"
      },
      {
        "flag": "-f",
        "dataType": "String",
        "isOptional": true,
        "name": "ogr_format",
        "explanation": "Select the output format. Starting with\nGDAL 2.3, if not specified, the format is guessed from the extension (previously\nwas GML). Use the short format name \n"
      },
      {
        "flag": null,
        "dataType": "String",
        "isOptional": true,
        "name": "layer name",
        "explanation": "The name of the layer created to hold the polygon features. \n"
      },
      {
        "flag": null,
        "dataType": "String",
        "isOptional": true,
        "name": "fieldname",
        "explanation": "The name of the field to create (defaults to \u201cDN\u201d). \n"
      },
      {
        "flag": "-q",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "q",
        "explanation": "The script runs in quiet mode.  The progress monitor is suppressed and routine\nmessages are not displayed. \n"
      }
    ],
    "manual_url": "https://gdal.org/programs/gdal_polygonize.html",
    "example": ""
  },
  {
    "name": "nearblack",
    "exec": "nearblack",
    "summary": "Convert nearly black/white borders to black.",
    "description": "This utility will scan an image and try to set all pixels that are nearly or exactly\nblack, white or one or more custom colors around the collar to black or white.  This\nis often used to \u201cfix up\u201d lossy compressed air photos so that color pixels\ncan be treated as transparent when mosaicing.",
    "syntax": "nearblack [-of format] [-white | [-color c1 , c2 , c3 ... cn] *] [-near dist] [-nb non_black_pixels] [-setalpha] [-setmask] [-o outfile] [-q] [-co \"NAME=VALUE\"] * infile",
    "parameters": [
      {
        "flag": "-o",
        "dataType": "String",
        "isOptional": true,
        "isOutputFile": true,
        "name": "outfile",
        "explanation": "The name of the output file to be created. \n"
      },
      {
        "flag": null,
        "dataType": "String",
        "isOptional": false,
        "isInputFile": true,
        "name": "infile",
        "explanation": "The input file.  Any GDAL supported format, any number of bands, normally 8bit\nByte bands. \n"
      }
    ],
    "options": [
      {
        "flag": "-of",
        "dataType": "String",
        "isOptional": true,
        "name": "format",
        "explanation": "Select the output format.\nStarting with GDAL 2.3, if not specified, the format is guessed from the extension (previously\nwas ERDAS Imagine .img).\nUse the short format name (GTiff for GeoTIFF for example). \n"
      },
      {
        "flag": "-co",
        "dataType": "String",
        "isOptional": false,
        "input_pattern": "`\"NAME=VALUE\"`",
        "name": "co",
        "explanation": "Passes a creation option to the output format driver.  Multiple\n -co  options may be listed. See  Raster drivers  format\nspecific documentation for legal creation options for each format. \n Only valid when creating a new file \n"
      },
      {
        "flag": "-white",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "white",
        "explanation": "Search for nearly white (255) pixels instead of nearly black pixels. \n"
      },
      {
        "flag": "-color",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "c1,c2,c3...cn",
        "name": "color",
        "explanation": "Search for pixels near the specified color. May be specified multiple times.\nWhen -color is specified, the pixels that are considered as the collar are set to 0. \n"
      },
      {
        "flag": "-near",
        "dataType": "String",
        "isOptional": true,
        "name": "near dist",
        "explanation": "Select how far from black, white or custom colors the pixel values can be\nand still considered near black, white or custom color.  Defaults to 15. \n"
      },
      {
        "flag": "-nb",
        "dataType": "Integer",
        "isOptional": true,
        "defaultValue": 15,
        "name": "non_black_pixels",
        "explanation": "number of non-black pixels that can be encountered before the giving up search inwards. Defaults to 2. \n"
      },
      {
        "flag": "-setalpha",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "setalpha",
        "explanation": "Adds an alpha band if the output file is specified and the input file has 3 bands,\nor sets the alpha band of the output file if it is specified and the input file has 4 bands,\nor sets the alpha band of the input file if it has 4 bands and no output file is specified.\nThe alpha band is set to 0 in the image collar and to 255 elsewhere. \n"
      },
      {
        "flag": "-setmask",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "setmask",
        "explanation": "Adds a mask band to the output file,\nor adds a mask band to the input file if it does not already have one and no output file is specified.\nThe mask band is set to 0 in the image collar and to 255 elsewhere. \n"
      },
      {
        "flag": "-q",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "q",
        "explanation": "Suppress progress monitor and other non-error output. \n"
      }
    ],
    "manual_url": "https://gdal.org/programs/nearblack.html",
    "example": []
  },
  {
    "name": "gdal_grid",
    "exec": "gdal_grid",
    "summary": "Creates regular grid from the scattered data.",
    "description": "This program creates regular grid (raster) from the scattered data read from\nthe OGR datasource. Input data will be interpolated to fill grid nodes with\nvalues, you can choose from various interpolation methods. It is possible to set the  GDAL_NUM_THREADS \nconfiguration option to parallelize the processing. The value to specify is\nthe number of worker threads, or  ALL_CPUS  to use all the cores/CPUs of the\ncomputer.",
    "syntax": "gdal_grid [-ot { Byte / Int16 / UInt16 / UInt32 / Int32 / Float32 / Float64 / CInt16 / CInt32 / CFloat32 / CFloat64 }] [-of format] [-co \"NAME=VALUE\"] [-zfield field_name] [-z_increase increase_value] [-z_multiply multiply_value] [-a_srs srs_def] [-spat xmin ymin xmax ymax] [-clipsrc xmin ymin xmax ymax| WKT | datasource | spat_extent] [-clipsrcsql sql_statement] [-clipsrclayer layer] [-clipsrcwhere expression] [-l layername] * [-where expression] [-sql select_statement] [-txe xmin xmax] [-tye ymin ymax] [-outsize xsize ysize] [-a algorithm [: parameter1=value1] *] [-q] src_datasource dst_filename",
    "parameters": [
      {
        "flag": null,
        "dataType": "String",
        "isOptional": false,
        "name": "src_datasource",
        "isInputFile": true,
        "explanation": "Any OGR supported readable datasource. \n"
      },
      {
        "flag": null,
        "dataType": "String",
        "isOptional": false,
        "name": "dst_filename",
        "isOutputFile": true,
        "explanation": "The GDAL supported output file. \n"
      }
    ],
    "options": [
      {
        "flag": "-ot",
        "dataType": "String",
        "isOptional": true,
        "available_values": [
          "Byte",
          "Int16",
          "UInt16",
          "UInt32",
          "Int32",
          "Float32",
          "Float64",
          "CInt16",
          "CInt32",
          "CFloat32",
          "CFloat64"
        ],
        "name": "type",
        "explanation": "Force the output image bands to have a specific type. Use type names\n(i.e.  Byte ,  Int16 ,\u2026) \n"
      },
      {
        "flag": "-of",
        "dataType": "String",
        "isOptional": true,
        "name": "format",
        "explanation": "Select the output format. Starting with GDAL 2.3, if not specified, the\nformat is guessed from the extension (previously was GTiff). Use the short\nformat name. \n"
      },
      {
        "flag": "-txe",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "xmin xmax",
        "name": "txe",
        "explanation": "Set georeferenced X extents of output file to be created. \n"
      },
      {
        "flag": "-tye",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "ymin ymax",
        "name": "tye",
        "explanation": "Set georeferenced Y extents of output file to be created. \n"
      },
      {
        "flag": "-outsize",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "xsize ysize",
        "name": "outsize",
        "explanation": "Set the size of the output file in pixels and lines. \n"
      },
      {
        "flag": "-a_srs",
        "dataType": "String",
        "isOptional": true,
        "name": "a_srs_def",
        "explanation": "Override the projection for the output file.  The srs_def may be any of the usual GDAL/OGR forms,\ncomplete WKT, PROJ.4, EPSG:n or a file containing the WKT.\nNo reprojection is done. \n"
      },
      {
        "flag": "-zfield",
        "dataType": "String",
        "isOptional": true,
        "name": "z_field_name",
        "explanation": "Identifies an attribute field\non the features to be used to get a Z value from. This value overrides Z value\nread from feature geometry record (naturally, if you have a Z value in\ngeometry, otherwise you have no choice and should specify a field name\ncontaining Z value). \n"
      },
      {
        "flag": "-z_increase",
        "dataType": "Float",
        "isOptional": true,
        "defaultValue": 0,
        "name": "z_increase_value",
        "explanation": "Addition to the attribute field\non the features to be used to get a Z value from. The addition should be the same\nunit as Z value. The result value will be Z value + Z increase value. The default value is 0. \n"
      },
      {
        "flag": "-z_multiply",
        "dataType": "Integer",
        "isOptional": true,
        "defaultValue": 1,
        "name": "multiply_value",
        "explanation": "This is multiplication ratio for Z field. This can be used for shift from e.g. foot to meters or from\nelevation to deep. The result value will be (Z value + Z increase value) * Z multiply value.\nThe default value is 1. \n"
      },
      {
        "flag": "-a",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "<[algorithm[:parameter1=value1][:parameter2=value2]...]>",
        "available_choices": [
          {
            "choice": "invdist",
            "description": "Inverse distance to a power. This is default algorithm. It has following parameters:\n\n    power: Weighting power (default 2.0).\n\n    smoothing: Smoothing parameter (default 0.0).\n\n    radius1: The first radius (X axis if rotation angle is 0) of search ellipse. Set this parameter to zero to use whole point array. Default is 0.0.\n\n    radius2: The second radius (Y axis if rotation angle is 0) of search ellipse. Set this parameter to zero to use whole point array. Default is 0.0.\n\n    angle: Angle of search ellipse rotation in degrees (counter clockwise, default 0.0).\n\n    max_points: Maximum number of data points to use. Do not search for more points than this number. This is only used if search ellipse is set (both radii are non-zero). Zero means that all found points should be used. Default is 0.\n\n    min_points: Minimum number of data points to use. If less amount of points found the grid node considered empty and will be filled with NODATA marker. This is only used if search ellipse is set (both radii are non-zero). Default is 0.\n\n    nodata: NODATA marker to fill empty points (default 0.0).\n"
          },
          {
            "choice": "invdistnn",
            "description": "\n\nNew in version 2.1.\n\nInverse distance to a power with nearest neighbor searching, ideal when max_points is used. It has following parameters:\n\n    power: Weighting power (default 2.0).\n\n    smoothing: Smoothing parameter (default 0.0).\n\n    radius: The radius of the search circle, which should be non-zero. Default is 1.0.\n\n    max_points: Maximum number of data points to use. Do not search for more points than this number. Found points will be ranked from nearest to furthest distance when weighting. Default is 12.\n\n    min_points: Minimum number of data points to use. If less amount of points found the grid node is considered empty and will be filled with NODATA marker. Default is 0.\n\n    nodata: NODATA marker to fill empty points (default 0.0).\n"
          },
          {
            "choice": "average",
            "description": "Moving average algorithm. It has following parameters:\n\n    radius1: The first radius (X axis if rotation angle is 0) of search ellipse. Set this parameter to zero to use whole point array. Default is 0.0.\n\n    radius2: The second radius (Y axis if rotation angle is 0) of search ellipse. Set this parameter to zero to use whole point array. Default is 0.0.\n\n    angle: Angle of search ellipse rotation in degrees (counter clockwise, default 0.0).\n\n    min_points: Minimum number of data points to use. If less amount of points found the grid node considered empty and will be filled with NODATA marker. Default is 0.\n\n    nodata: NODATA marker to fill empty points (default 0.0).\n Note, that it is essential to set search ellipse for moving average method. It is a window that will be averaged when computing grid nodes values."
          },
          {
            "choice": "nearest",
            "description": "Nearest neighbor algorithm. It has following parameters:\n\n    radius1: The first radius (X axis if rotation angle is 0) of search ellipse. Set this parameter to zero to use whole point array. Default is 0.0.\n\n    radius2: The second radius (Y axis if rotation angle is 0) of search ellipse. Set this parameter to zero to use whole point array. Default is 0.0.\n\n    angle: Angle of search ellipse rotation in degrees (counter clockwise, default 0.0).\n\n    nodata: NODATA marker to fill empty points (default 0.0).\n"
          },
          {
            "choice": "linear",
            "description": "\n\nNew in version 2.1.\n\nLinear interpolation algorithm.\n\nThe Linear method performs linear interpolation by computing a Delaunay triangulation of the point cloud, finding in which triangle of the triangulation the point is, and by doing linear interpolation from its barycentric coordinates within the triangle. If the point is not in any triangle, depending on the radius, the algorithm will use the value of the nearest point or the nodata value.\n\nIt has following parameters:\n\n    radius: In case the point to be interpolated does not fit into a triangle of the Delaunay triangulation, use that maximum distance to search a nearest neighbour, or use nodata otherwise. If set to -1, the search distance is infinite. If set to 0, nodata value will be always used. Default is -1.\n\n    nodata: NODATA marker to fill empty points (default 0.0).\n"
          },
          {
            "choice": "minimum",
            "description": " Minimum value found in grid node search ellipse.\n  set of options:\n\n    radius1: The first radius (X axis if rotation angle is 0) of search ellipse. Set this parameter to zero to use whole point array. Default is 0.0.\n\n    radius2: The second radius (Y axis if rotation angle is 0) of search ellipse. Set this parameter to zero to use whole point array. Default is 0.0.\n\n    angle: Angle of search ellipse rotation in degrees (counter clockwise, default 0.0).\n\n    min_points: Minimum number of data points to use. If less amount of points found the grid node considered empty and will be filled with NODATA marker. This is only used if search ellipse is set (both radii are non-zero). Default is 0.\n\n    nodata: NODATA marker to fill empty points (default 0.0).\n"
          },
          {
            "choice": "maximum",
            "description": "Maximum value found in grid node search ellipse. \n set of options:\n\n    radius1: The first radius (X axis if rotation angle is 0) of search ellipse. Set this parameter to zero to use whole point array. Default is 0.0.\n\n    radius2: The second radius (Y axis if rotation angle is 0) of search ellipse. Set this parameter to zero to use whole point array. Default is 0.0.\n\n    angle: Angle of search ellipse rotation in degrees (counter clockwise, default 0.0).\n\n    min_points: Minimum number of data points to use. If less amount of points found the grid node considered empty and will be filled with NODATA marker. This is only used if search ellipse is set (both radii are non-zero). Default is 0.\n\n    nodata: NODATA marker to fill empty points (default 0.0).\n"
          },
          {
            "choice": "range",
            "description": " A difference between the minimum and maximum values found in grid node search ellipse.\n  set of options:\n\n    radius1: The first radius (X axis if rotation angle is 0) of search ellipse. Set this parameter to zero to use whole point array. Default is 0.0.\n\n    radius2: The second radius (Y axis if rotation angle is 0) of search ellipse. Set this parameter to zero to use whole point array. Default is 0.0.\n\n    angle: Angle of search ellipse rotation in degrees (counter clockwise, default 0.0).\n\n    min_points: Minimum number of data points to use. If less amount of points found the grid node considered empty and will be filled with NODATA marker. This is only used if search ellipse is set (both radii are non-zero). Default is 0.\n\n    nodata: NODATA marker to fill empty points (default 0.0).\n"
          },
          {
            "choice": "count",
            "description": "A number of data points found in grid node search ellipse.\n  set of options:\n\n    radius1: The first radius (X axis if rotation angle is 0) of search ellipse. Set this parameter to zero to use whole point array. Default is 0.0.\n\n    radius2: The second radius (Y axis if rotation angle is 0) of search ellipse. Set this parameter to zero to use whole point array. Default is 0.0.\n\n    angle: Angle of search ellipse rotation in degrees (counter clockwise, default 0.0).\n\n    min_points: Minimum number of data points to use. If less amount of points found the grid node considered empty and will be filled with NODATA marker. This is only used if search ellipse is set (both radii are non-zero). Default is 0.\n\n    nodata: NODATA marker to fill empty points (default 0.0).\n"
          },
          {
            "choice": "average_distance",
            "description": "An average distance between the grid node (center of the search ellipse) and all of the data points found in grid node search ellipse. \n set of options:\n\n    radius1: The first radius (X axis if rotation angle is 0) of search ellipse. Set this parameter to zero to use whole point array. Default is 0.0.\n\n    radius2: The second radius (Y axis if rotation angle is 0) of search ellipse. Set this parameter to zero to use whole point array. Default is 0.0.\n\n    angle: Angle of search ellipse rotation in degrees (counter clockwise, default 0.0).\n\n    min_points: Minimum number of data points to use. If less amount of points found the grid node considered empty and will be filled with NODATA marker. This is only used if search ellipse is set (both radii are non-zero). Default is 0.\n\n    nodata: NODATA marker to fill empty points (default 0.0).\n"
          },
          {
            "choice": "average_distance_pts",
            "description": "An average distance between the data points found in grid node search ellipse. The distance between each pair of points within ellipse is calculated and average of all distances is set as a grid node value. \n set of options:\n\n    radius1: The first radius (X axis if rotation angle is 0) of search ellipse. Set this parameter to zero to use whole point array. Default is 0.0.\n\n    radius2: The second radius (Y axis if rotation angle is 0) of search ellipse. Set this parameter to zero to use whole point array. Default is 0.0.\n\n    angle: Angle of search ellipse rotation in degrees (counter clockwise, default 0.0).\n\n    min_points: Minimum number of data points to use. If less amount of points found the grid node considered empty and will be filled with NODATA marker. This is only used if search ellipse is set (both radii are non-zero). Default is 0.\n\n    nodata: NODATA marker to fill empty points (default 0.0).\n"
          }
        ],
        "name": "algorithm or data metric",
        "explanation": "Set the interpolation algorithm or data metric name and (optionally)\nits parameters. See  Interpolation algorithms  and  Data metrics \nsections for further discussion of available options. \n"
      },
      {
        "flag": "-spat",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "<xmin> <ymin> <xmax> <ymax>",
        "name": "spat",
        "explanation": "Adds a spatial filter to select only features contained within the bounding box described by\n(xmin, ymin) - (xmax, ymax). \n"
      },
      {
        "flag": "-clipsrc",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "[xmin ymin xmax ymax]|WKT|datasource|spat_extent",
        "name": "clipsrc",
        "explanation": "Adds a spatial filter to select only features contained within the\nspecified bounding box (expressed in source SRS), WKT geometry (POLYGON or\nMULTIPOLYGON), from a datasource or to the spatial extent of the  -spat \noption if you use the  spat_extent  keyword. When specifying a\ndatasource, you will generally want to use it in combination of the\n -clipsrclayer ,  -clipsrcwhere  or  -clipsrcsql \noptions. \n"
      },
      {
        "flag": "-clipsrcsql",
        "dataType": "String",
        "isOptional": true,
        "name": "sql_statement",
        "explanation": "Select desired geometries using an SQL query instead. \n"
      },
      {
        "flag": "-clipsrclayer",
        "dataType": "String",
        "isOptional": true,
        "name": "clipsrclayer",
        "explanation": "Select the named layer from the source clip datasource. \n"
      },
      {
        "flag": "-clipsrcwhere",
        "dataType": "String",
        "isOptional": true,
        "name": "clipsrcwhere expression",
        "explanation": "Restrict desired geometries based on attribute query. \n"
      },
      {
        "flag": "-l",
        "dataType": "String",
        "isOptional": true,
        "name": "layername",
        "explanation": "Indicates the layer(s) from the\ndatasource that will be used for input features.  May be specified multiple\ntimes, but at least one layer name or a  -sql  option must be\nspecified. \n"
      },
      {
        "flag": "-where",
        "dataType": "String",
        "isOptional": true,
        "name": "where expression",
        "explanation": "An optional SQL WHERE style query expression to be applied to select features\nto process from the input layer(s). \n"
      },
      {
        "flag": "-sql",
        "dataType": "String",
        "isOptional": true,
        "name": "select_statement",
        "explanation": "An SQL statement to be evaluated against the datasource to produce a\nvirtual layer of features to be processed. \n"
      },
      {
        "flag": "-co",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "<NAME=VALUE>",
        "name": "co",
        "explanation": "Many formats have one or more optional creation options that can be\nused to control particulars about the file created. For instance,\nthe GeoTIFF driver supports creation options to control compression,\nand whether the file should be tiled. \n The creation options available vary by format driver, and some\nsimple formats have no creation options at all. A list of options\nsupported for a format can be listed with the\n \u2013formats \ncommand line option but the documentation for the format is the\ndefinitive source of information on driver creation options.\nSee  Raster drivers  format\nspecific documentation for legal creation options for each format. \n"
      },
      {
        "flag": "-q",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "q",
        "explanation": "Suppress progress monitor and other non-error output. \n"
      }
    ],
    "manual_url": "https://gdal.org/programs/gdal_grid.html",
    "example": [
      "gdal_grid -a invdist:power=2.0:smoothing=1.0 -txe 85000 89000 -tye 894000 890000 -outsize 400 400 -of GTiff -ot Float64 -l dem dem.vrt dem.tiff",
      "gdal_grid -zfield \"Elevation\" -a invdist:power=2.0:smoothing=1.0 -txe 85000 89000 -tye 894000 890000 -outsize 400 400 -of GTiff -ot Float64 -l dem dem.vrt dem.tiff --config GDAL_NUM_THREADS ALL_CPUS"
    ]
  },
  {
    "name": "gdaltransform",
    "exec": "gdaltransform",
    "summary": "Transforms coordinates.",
    "description": "The gdaltransform utility reprojects a list of coordinates into any supported\nprojection,including GCP-based transformations. \n Coordinates are read as pairs, triples for 3D or, since GDAL 3.0.0, quadruplets for X,Y,Z,time of numbers per line from standard input, transformed, and written out to standard output in the same way. All transformations offered by gdalwarp are handled, including gcp-based ones.\n\nNote that input and output must always be in decimal form. There is currently no support for DMS input or output.\n\nIf an input image file is provided, input is in pixel/line coordinates on that image. If an output file is provided, output is in pixel/line coordinates on that image.",
    "syntax": "gdaltransform [--help -general] [-i] [-s_srs srs_def] [-t_srs srs_def] [-to \"NAME=VALUE\"] [-ct proj_string] [-order n] [-tps] [-rpc] [-geoloc] [-gcp pixel line easting northing [elevation]] * [-output_xy] [srcfile [dstfile]]",
    "parameters": [
      {
        "flag": null,
        "dataType": "String",
        "isOptional": true,
        "name": "srcfile",
        "isInputFile": true,
        "explanation": "File with source projection definition or GCP\u2019s. If\nnot given, source projection is read from the command-line  -s_srs \nor  -gcp  parameters \n"
      },
      {
        "flag": null,
        "dataType": "String",
        "isOptional": true,
        "name": "dstfile",
        "isOutputFile": true,
        "explanation": "File with destination projection definition. \n"
      }
    ],
    "options": [
      {
        "flag": "-s_srs",
        "dataType": "String",
        "isOptional": true,
        "name": "srs_def",
        "explanation": "Set source spatial reference.\nThe coordinate systems that can be passed are anything supported by the\nOGRSpatialReference.SetFromUserInput() call, which includes EPSG PCS and GCSes\n(i.e. EPSG:4296), PROJ.4 declarations (as above), or the name of a .prj file\ncontaining well known text. \n"
      },
      {
        "flag": "-t_srs",
        "dataType": "String",
        "isOptional": true,
        "name": "t_srs_def",
        "explanation": "set target spatial reference.\nThe coordinate systems that can be passed are anything supported by the\nOGRSpatialReference.SetFromUserInput() call, which includes EPSG PCS and GCSes\n(i.e. EPSG:4296), PROJ.4 declarations (as above), or the name of a .prj file\ncontaining well known text. \n"
      },
      {
        "flag": "-ct",
        "dataType": "String",
        "isOptional": true,
        "name": "ct",
        "explanation": "A PROJ string (single step operation or multiple step string\nstarting with +proj=pipeline), a WKT2 string describing a CoordinateOperation,\nor a  urn:ogc:def:coordinateOperation:EPSG::XXXX  URN overriding the default\ntransformation from the source to the target CRS. It must take into account the\naxis order of the source and target CRS. \n \n New in version 3.0. \n \n"
      },
      {
        "flag": "-order",
        "dataType": "String",
        "isOptional": true,
        "name": "order",
        "explanation": "order of polynomial used for warping (1 to 3). The default is to select a\npolynomial order based on the number of GCPs. \n"
      },
      {
        "flag": "-tps",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "tps",
        "explanation": "Force use of thin plate spline transformer based on available GCPs. \n"
      },
      {
        "flag": "-rpc",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "rpc",
        "explanation": "Force use of RPCs. \n"
      },
      {
        "flag": "-geoloc",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "geoloc",
        "explanation": "Force use of Geolocation Arrays. \n"
      },
      {
        "flag": "-i",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "i",
        "explanation": "Inverse transformation: from destination to source. \n"
      },
      {
        "flag": "-gcp",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "<pixel> <line> <easting> <northing> [<elevation>]",
        "name": "gcp",
        "explanation": "Provide a GCP to be used for transformation (generally three or more are required) \n"
      },
      {
        "flag": "-output_xy",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "output_xy",
        "explanation": "Restrict output to \u201cx y\u201d instead of \u201cx y z\u201d \n"
      },
      {
        "flag": "-to",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "NAME=VALUE",
        "name": "to",
        "explanation": "set a transformer option suitable to pass to  GDALCreateGenImgProjTransformer2() . \n"
      }
    ],
    "manual_url": "https://gdal.org/programs/gdaltransform.html",
    "example": [
      "gdaltransform -s_srs EPSG:28992 -t_srs EPSG:31370",
      "gdaltransform -i -rpc 06OCT20025052-P2AS-005553965230_01_P001.TIF",
      "gdaltransform -ct \"+proj=pipeline +step +proj=unitconvert +xy_in=deg +xy_out=rad +step +proj=cart +step +proj=helmert +convention=position_vector +x=0.0127 +dx=-0.0029 +rx=-0.00039 +drx=-0.00011 +y=0.0065 +dy=-0.0002 +ry=0.00080 +dry=-0.00019 +z=-0.0209 +dz=-0.0006 +rz=-0.00114 +drz=0.00007 +s=0.00195 +ds=0.00001 +t_epoch=1988.0 +step +proj=cart +inv +step +proj=unitconvert +xy_in=rad +xy_out=deg\""
    ]
  },
  {
    "name": "ogr2ogr",
    "exec": "ogr2ogr",
    "summary": "Converts simple features data between file formats.",
    "description": "ogr2ogr  can be used to convert simple features data between file\nformats. It can also perform various operations during the process, such as\nspatial or attribute selection, reducing the set of attributes, setting the\noutput coordinate system or even reprojecting the features during translation.",
    "syntax": "ogr2ogr [--help -general] [-skipfailures] [-append] [-update] [-select field_list] [-where restricted_where | @filename] [-progress] [-sql sql statement| @filename] [-dialect dialect] [-preserve_fid] [-fid FID] [-limit nb_features] [-spat xmin ymin xmax ymax] [-spat_srs srs_def] [-geomfield field] [-a_srs srs_def] [-t_srs srs_def] [-s_srs srs_def] [-ct string] [-f format_name] [-overwrite] [[-dsco NAME=VALUE] ...] dst_datasource_name src_datasource_name [-lco NAME=VALUE] [-nln name] [-nlt type | PROMOTE_TO_MULTI | CONVERT_TO_LINEAR | CONVERT_TO_CURVE] [-dim XY | XYZ | XYM | XYZM | 2 | 3 | layer_dim] [layer [layer ...]] # Advanced options [-gt n] [[-oo NAME=VALUE] ...] [[-doo NAME=VALUE] ...] [-clipsrc [xmin ymin xmax ymax] | WKT | datasource | spat_extent] [-clipsrcsql sql_statement] [-clipsrclayer layer] [-clipsrcwhere expression] [-clipdst [xmin ymin xmax ymax] | WKT | datasource] [-clipdstsql sql_statement] [-clipdstlayer layer] [-clipdstwhere expression] [-wrapdateline] [-datelineoffset val] [[-simplify tolerance] | [-segmentize max_dist]] [-addfields] [-unsetFid] [-relaxedFieldNameMatch] [-forceNullable] [-unsetDefault] [-fieldTypeToString All | ( type1 [, type2] * )] [-unsetFieldWidth] [-mapFieldType type1 | All=type2 [, type3=type4] *] [-fieldmap identity | index1 [, index2] *] [-splitlistfields] [-maxsubfields val] [-explodecollections] [-zfield field_name] [-gcp ungeoref_x ungeoref_y georef_x georef_y [elevation]] * [-order n | -tps] [-nomd] [-mo \"META-TAG=VALUE\"] * [-noNativeData]",
    "parameters": [
      {
        "flag": null,
        "dataType": "String",
        "isOptional": false,
        "name": "src_datasource_name",
        "isInputFile": true,
        "explanation": "src_datasource_name"
      },
      {
        "flag": null,
        "dataType": "String",
        "isOptional": false,
        "name": "dst_datasource_name",
        "isOutputFile": true,
        "explanation": "dst_datasource_name"
      }
    ],
    "options": [
      {
        "flag": "-f",
        "dataType": "String",
        "isOptional": true,
        "name": "format_name",
        "explanation": "Output file format name, e.g.  ESRI   Shapefile ,  MapInfo   File ,\n PostgreSQL .  Starting with GDAL 2.3, if not specified, the format is\nguessed from the extension (previously was ESRI Shapefile). \n"
      },
      {
        "flag": "-append",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "append",
        "explanation": "Append to existing layer instead of creating new \n"
      },
      {
        "flag": "-overwrite",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "overwrite",
        "explanation": "Delete the output layer and recreate it empty \n"
      },
      {
        "flag": "-update",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "update",
        "explanation": "Open existing output datasource in update mode rather than trying to create\na new one \n"
      },
      {
        "flag": "-select",
        "dataType": "String",
        "isOptional": true,
        "name": "field_list",
        "explanation": "Comma-delimited list of fields from input layer to copy to the new layer. A\nfield is skipped if mentioned previously in the list even if the input\nlayer has duplicate field names. (Defaults to  all ; any field is skipped\nif a subsequent field with same name is found.) Geometry fields can also be\nspecified in the list. \n Note this setting cannot be used together with  -append . To control the\nselection of fields when appending to a layer, use  -fieldmap  or  -sql . \n"
      },
      {
        "flag": "-progress",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "progress",
        "explanation": "Display progress on terminal. Only works if input layers have the \u201cfast\nfeature count\u201d capability. \n"
      },
      {
        "flag": "-sql",
        "dataType": "String",
        "isOptional": true,
        "name": "sql_statement",
        "explanation": "SQL statement to execute. The resulting table/layer will be saved to the\noutput. Starting with GDAL 2.1, the  @filename  syntax can be used to\nindicate that the content is in the pointed filename. \n"
      },
      {
        "flag": "-dialect",
        "dataType": "String",
        "isOptional": true,
        "name": "dialect",
        "explanation": "SQL dialect. In some cases can be used to use (unoptimized) OGR SQL instead\nof the native SQL of an RDBMS by passing OGRSQL. The \u201cSQLITE\u201d dialect can\nalso be used with any datasource. \n"
      },
      {
        "flag": "-skipfailures",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "skipfailures",
        "explanation": "Continue after a failure, skipping the failed feature. \n"
      },
      {
        "flag": "-spat",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "<xmin> <ymin> <xmax> <ymax>",
        "name": "spat",
        "explanation": "spatial query extents, in the SRS of the source layer(s) (or the one\nspecified with  -spat_srs ). Only features whose geometry intersects the\nextents will be selected. The geometries will not be clipped unless\n -clipsrc  is specified. \n"
      },
      {
        "flag": "-spat_srs",
        "dataType": "String",
        "isOptional": true,
        "name": "srs_def",
        "explanation": "Override spatial filter SRS. \n"
      },
      {
        "flag": "-geomfield",
        "dataType": "String",
        "isOptional": true,
        "name": "field",
        "explanation": "Name of the geometry field on which the spatial filter operates on. \n"
      },
      {
        "flag": "-nln",
        "dataType": "String",
        "isOptional": true,
        "name": "nln name",
        "explanation": "Assign an alternate name to the new layer \n"
      },
      {
        "flag": "-nlt",
        "dataType": "String",
        "isOptional": true,
        "available_values": [
          "NONE",
          "GEOMETRY",
          "POINT",
          "LINESTRING",
          "POLYGON",
          "GEOMETRYCOLLECTION",
          "MULTIPOINT",
          "MULTIPOLYGON",
          "MULTILINESTRING",
          "CIRCULARSTRING",
          "COMPOUNDCURVE",
          "CURVEPOLYGON",
          "MULTICURVE",
          "MULTISURFACE",
          "Z",
          "M",
          "ZM",
          "PROMOTE_TO_MULTI",
          "CONVERT_TO_LINEAR",
          "CONVERT_TO_CURVE"
        ],
        "name": "nlt type",
        "explanation": "Define the geometry type for the created layer. One of  NONE ,\n GEOMETRY ,  POINT ,  LINESTRING ,  POLYGON ,\n GEOMETRYCOLLECTION ,  MULTIPOINT ,  MULTIPOLYGON ,\n MULTILINESTRING ,  CIRCULARSTRING ,  COMPOUNDCURVE ,\n CURVEPOLYGON ,  MULTICURVE , and  MULTISURFACE  non-linear geometry\ntypes. Add  Z ,  M , or  ZM  to the type name to specify coordinates\nwith elevation, measure, or elevation and measure.  PROMOTE_TO_MULTI  can\nbe used to automatically promote layers that mix polygon or multipolygons\nto multipolygons, and layers that mix linestrings or multilinestrings to\nmultilinestrings. Can be useful when converting shapefiles to PostGIS and\nother target drivers that implement strict checks for geometry types.\n CONVERT_TO_LINEAR  can be used to to convert non-linear geometry types\ninto linear geometry types by approximating them, and  CONVERT_TO_CURVE  to\npromote a non-linear type to its generalized curve type ( POLYGON  to\n CURVEPOLYGON ,  MULTIPOLYGON  to  MULTISURFACE ,  LINESTRING  to\n COMPOUNDCURVE ,  MULTILINESTRING  to  MULTICURVE ). Starting with\nversion 2.1 the type can be defined as measured (\u201c25D\u201d remains as an alias for\nsingle \u201cZ\u201d). Some forced geometry conversions may result in invalid\ngeometries, for example when forcing conversion of multi-part multipolygons\nwith  -nlt   POLYGON , the resulting polygon will break the Simple Features\nrules. \n"
      },
      {
        "flag": "-dim",
        "dataType": "String",
        "isOptional": true,
        "available_values": [
          "XY",
          "XYZ",
          "XYM",
          "XYZM"
        ],
        "name": "dim",
        "explanation": "Force the coordinate dimension to val (valid values are  XY ,  XYZ ,\n XYM , and  XYZM  - for backwards compatibility  2  is an alias for\n XY  and  3  is an alias for  XYZ ). This affects both the layer\ngeometry type, and feature geometries. The value can be set to  layer_dim \nto instruct feature geometries to be promoted to the coordinate dimension\ndeclared by the layer. Support for M was added in GDAL 2.1. \n"
      },
      {
        "flag": "-a_srs",
        "dataType": "String",
        "isOptional": true,
        "name": "a_srs_def",
        "explanation": "Assign an output SRS. Srs_def can be a full WKT definition (hard to escape\nproperly), or a well known definition (i.e. EPSG:4326) or a file with a WKT\ndefinition. \n"
      },
      {
        "flag": "-t_srs",
        "dataType": "String",
        "isOptional": true,
        "name": "t_srs_def",
        "explanation": "Reproject/transform to this SRS on output. \n"
      },
      {
        "flag": "-s_srs",
        "dataType": "String",
        "isOptional": true,
        "name": "srs_def",
        "explanation": "Override source SRS. \n"
      },
      {
        "flag": "-ct",
        "dataType": "String",
        "isOptional": true,
        "name": "string",
        "explanation": "A PROJ string (single step operation or multiple step string starting with\n+proj=pipeline), a WKT2 string describing a CoordinateOperation, or a\n urn:ogc:def:coordinateOperation:EPSG::XXXX  URN overriding the default\ntransformation from the source to the target CRS. It must take into account\nthe axis order of the source and target CRS. \n \n New in version 3.0. \n \n"
      },
      {
        "flag": "-preserve_fid",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "preserve_fid",
        "explanation": "Use the FID of the source features instead of letting the output driver\nautomatically assign a new one (for formats that require an FID).  If not\nin append mode, this behaviour is the default if the output driver has\na FID layer creation option, un which case the name of the source FID\ncolumn will be used and source feature IDs will be attempted to be\npreserved. This behaviour can be disabled by setting  -unsetFid . \n"
      },
      {
        "flag": "-ds_transaction",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "ds_transaction",
        "explanation": "Force the use of a dataset level transaction (for drivers that support such\nmechanism), especially for drivers such as FileGDB that only support\ndataset level transaction in emulation mode. \n"
      },
      {
        "flag": "-clipsrc",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "[xmin ymin xmax ymax]|WKT|datasource|spat_extent",
        "name": "clipsrc",
        "explanation": "Clip geometries to the specified bounding box (expressed in source SRS),\nWKT geometry (POLYGON or MULTIPOLYGON), from a datasource or to the spatial\nextent of the -spa.. option if you use the spat_extent keyword. When\nspecifying a datasource, you will generally want to use it in combination\nof the -clipsrclayer, -clipsrcwhere or -clipsrcsql options \n"
      },
      {
        "flag": "-clipsrcsql",
        "dataType": "String",
        "isOptional": true,
        "name": "sql_statement",
        "explanation": "Select desired geometries using an SQL query instead. \n"
      },
      {
        "flag": "-clipsrclayer",
        "dataType": "String",
        "isOptional": true,
        "name": "clipsrclayer layername",
        "explanation": "Select the named layer from the source clip datasource. \n"
      },
      {
        "flag": "-clipsrcwhere",
        "dataType": "String",
        "isOptional": true,
        "name": "clipsrcwhere expression",
        "explanation": "Restrict desired geometries based on attribute query. \n"
      },
      {
        "flag": "-clipdst",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "<xmin> <ymin> <xmax> <ymax>",
        "name": "clipdst",
        "explanation": "Clip geometries after reprojection to the specified bounding box (expressed\nin dest SRS), WKT geometry (POLYGON or MULTIPOLYGON) or from a datasource.\nWhen specifying a datasource, you will generally want to use it in\ncombination of the -clipdstlayer, -clipdstwhere or -clipdstsq.. options \n"
      },
      {
        "flag": "-clipdstsql",
        "dataType": "String",
        "isOptional": true,
        "name": "clipdstsql sql_statement",
        "explanation": "Select desired geometries using an SQL query instead. \n"
      },
      {
        "flag": "-clipdstlayer",
        "dataType": "String",
        "isOptional": true,
        "name": "clipdstlayer layername",
        "explanation": "Select the named layer from the destination clip datasource. \n"
      },
      {
        "flag": "-clipdstwhere",
        "dataType": "String",
        "isOptional": true,
        "name": "clipdstwhere expression",
        "explanation": "Restrict desired geometries based on attribute query. \n"
      },
      {
        "flag": "-wrapdateline",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "wrapdateline",
        "explanation": "Split geometries crossing the dateline meridian (long. = +/- 180deg) \n"
      },
      {
        "flag": "-datelineoffset",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "datelineoffset",
        "explanation": "Offset from dateline in degrees (default long. = +/- 10deg, geometries\nwithin 170deg to -170deg will be split) \n"
      },
      {
        "flag": "-simplify",
        "dataType": "String",
        "isOptional": true,
        "name": "tolerance",
        "explanation": "Distance tolerance for simplification. Note: the algorithm used preserves\ntopology per feature, in particular for polygon geometries, but not for a\nwhole layer. \n"
      },
      {
        "flag": "-segmentize",
        "dataType": "Float",
        "isOptional": true,
        "name": "max_dist",
        "explanation": "Maximum distance between 2 nodes. Used to create intermediate points. \n"
      },
      {
        "flag": "-unsetFieldWidth",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "unsetfieldwidth",
        "explanation": "Set field width and precision to 0. \n"
      },
      {
        "flag": "-splitlistfields",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "splitlistfields",
        "explanation": "Split fields of type StringList, RealList or IntegerList into as many\nfields of type String, Real or Integer as necessary. \n"
      },
      {
        "flag": "-maxsubfields",
        "dataType": "String",
        "isOptional": true,
        "name": "maxsubfields val",
        "explanation": "To be combined with  -splitlistfields  to limit the number of subfields\ncreated for each split field. \n"
      },
      {
        "flag": "-explodecollections",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "explodecollections",
        "explanation": "Produce one feature for each geometry in any kind of geometry collection in\nthe source file \n"
      },
      {
        "flag": "-zfield",
        "dataType": "String",
        "isOptional": true,
        "name": "zfield name",
        "explanation": "Uses the specified field to fill the Z coordinate of geometries. \n"
      },
      {
        "flag": "-gcp",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "<ungeoref_x> <ungeoref_y> <georef_x> <georef_y> <elevation>",
        "name": "gcp",
        "explanation": "Add the indicated ground control point. This option may be provided\nmultiple times to provide a set of GCPs. \n"
      },
      {
        "flag": "-order",
        "dataType": "Integer",
        "isOptional": true,
        "name": "order",
        "explanation": "Order of polynomial used for warping (1 to 3). The default is to select a\npolynomial order based on the number of GCPs. \n"
      },
      {
        "flag": "-tps",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "tps",
        "explanation": "Force use of thin plate spline transformer based on available GCPs. \n"
      },
      {
        "flag": "-fieldmap",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "fieldmap",
        "explanation": "Specifies the list of field indexes to be copied from the source to the\ndestination. The (n)th value specified in the list is the index of the\nfield in the target layer definition in which the n(th) field of the source\nlayer must be copied. Index count starts at zero. To omit a field, specify\na value of -1. There must be exactly as many values in the list as the\ncount of the fields in the source layer. We can use the \u2018identity\u2019 setting\nto specify that the fields should be transferred by using the same order.\nThis setting should be used along with the  -append  setting. \n"
      },
      {
        "flag": "-addfields",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "addfields",
        "explanation": "This is a specialized version of  -append . Contrary to  -append ,\n -addfields  has the effect of adding, to existing target layers, the new\nfields found in source layers. This option is useful when merging files\nthat have non-strictly identical structures. This might not work for output\nformats that don\u2019t support adding fields to existing non-empty layers. Note\nthat if you plan to use -addfields, you may need to combine it with\n-forceNullable, including for the initial import. \n"
      },
      {
        "flag": "-relaxedFieldNameMatch",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "relaxedfieldnamematch",
        "explanation": "Do field name matching between source and existing target layer in a more\nrelaxed way if the target driver has an implementation for it. \n"
      },
      {
        "flag": "-forceNullable",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "forcenullable",
        "explanation": "Do not propagate not-nullable constraints to target layer if they exist in\nsource layer. \n"
      },
      {
        "flag": "-unsetDefault",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "unsetdefault",
        "explanation": "Do not propagate default field values to target layer if they exist in\nsource layer. \n"
      },
      {
        "flag": "-unsetFid",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "unsetfid",
        "explanation": "Can be specify to prevent the name of the source FID column and source\nfeature IDs from being re-used for the target layer. This option can for\nexample be useful if selecting source features with a ORDER BY clause. \n"
      },
      {
        "flag": "-nomd",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "nomd",
        "explanation": "To disable copying of metadata from source dataset and layers into target\ndataset and layers, when supported by output driver. \n"
      },
      {
        "flag": "-noNativeData",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "nonativedata",
        "explanation": "To disable copying of native data, i.e. details of source format not\ncaptured by OGR abstraction, that are otherwise preserved by some drivers\n(like GeoJSON) when converting to same format. \n \n New in version 2.1. \n \n"
      },
      {
        "flag": "-where",
        "dataType": "String",
        "isOptional": true,
        "name": "restricted_where",
        "explanation": "Attribute query (like SQL WHERE). Starting with GDAL 2.1, the  @filename \nsyntax can be used to indicate that the content is in the pointed filename. \n"
      },
      {
        "flag": "-dsco",
        "dataType": "String",
        "isOptional": false,
        "input_pattern": "NAME=VALUE",
        "name": "dsco",
        "explanation": "Dataset creation option (format specific) \n"
      },
      {
        "flag": "-lco",
        "dataType": "String",
        "isOptional": false,
        "input_pattern": "NAME=VALUE",
        "name": "lco",
        "explanation": "Layer creation option (format specific) \n"
      },
      {
        "flag": "-fid",
        "dataType": "Integer",
        "isOptional": true,
        "name": "fid",
        "explanation": "If provided, only the feature with the specified feature id will be\nprocessed.  Operates exclusive of the spatial or attribute queries. Note: if\nyou want to select several features based on their feature id, you can also\nuse the fact the \u2018fid\u2019 is a special field recognized by OGR SQL. So,\n -where \u201cfid in (1,3,5)\u201d  would select features 1, 3 and 5. \n"
      },
      {
        "flag": "-limit",
        "dataType": "Integer",
        "isOptional": true,
        "name": "nb_features",
        "explanation": "Limit the number of features per layer. \n"
      },
      {
        "flag": "-oo",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "NAME=VALUE",
        "name": "oo",
        "explanation": "Input dataset open option (format specific). \n"
      },
      {
        "flag": "-doo",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "NAME=VALUE",
        "name": "doo",
        "explanation": "Destination dataset open option (format specific), only valid in -update mode. \n"
      },
      {
        "flag": "-gt",
        "dataType": "String",
        "isOptional": true,
        "name": "gt",
        "explanation": "Group n features per transaction (default 20000). Increase the value for\nbetter performance when writing into DBMS drivers that have transaction\nsupport.  n  can be set to unlimited to load the data into a single\ntransaction. \n"
      },
      {
        "flag": "-fieldTypeToString",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "type1,...",
        "name": "fieldtypetostring",
        "explanation": "Converts any field of the specified type to a field of type string in the\ndestination layer. Valid types are : Integer, Integer64, Real, String,\nDate, Time, DateTime, Binary, IntegerList, Integer64List, RealList,\nStringList. Special value All can be used to convert all fields to strings.\nThis is an alternate way to using the CAST operator of OGR SQL, that may\navoid typing a long SQL query. Note that this does not influence the field\ntypes used by the source driver, and is only an afterwards conversion. \n"
      },
      {
        "flag": "-mapFieldType",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "srctype|All=dsttype,...",
        "name": "mapfieldtype",
        "explanation": "Converts any field of the specified type to another type. Valid types are :\nInteger, Integer64, Real, String, Date, Time, DateTime, Binary,\nIntegerList, Integer64List, RealList, StringList. Types can also include\nsubtype between parenthesis, such as Integer(Boolean), Real(Float32), \u2026\nSpecial value All can be used to convert all fields to another type. This\nis an alternate way to using the CAST operator of OGR SQL, that may avoid\ntyping a long SQL query. This is a generalization of -fieldTypeToString.\nNote that this does not influence the field types used by the source\ndriver, and is only an afterwards conversion. \n"
      },
      {
        "flag": "-mo",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "META-TAG=VALUE",
        "name": "mo",
        "explanation": "Passes a metadata key and value to set on the output dataset, when\nsupported by output driver. \n"
      }
    ],
    "manual_url": "https://gdal.org/programs/ogr2ogr.html",
    "example": [
      "ogr2ogr -update -append -f PostgreSQL PG:dbname=warmerda abc.tab",
      "ogr2ogr -wrapdateline -t_srs EPSG:4326 -clipdst -5 40 15 55 france_4326.shp europe_laea.shp",
      "ogr2ogr -append -fieldmap 2,-1,4 dst.shp src.shp"
    ]
  },
  {
    "name": "ogrinfo",
    "exec": "ogrinfo",
    "summary": "Lists information about an OGR-supported data source.",
    "description": "The  ogrinfo  program lists various information about an OGR-supported data\nsource to stdout (the terminal).",
    "syntax": "ogrinfo [--help-general] [-ro] [-q] [-where restricted_where|\\@filename]\n  [-spat xmin ymin xmax ymax] [-geomfield field] [-fid fid]\n   [-sql statement|\\@filename] [-dialect dialect] [-al] [-rl] [-so] [-fields={YES/NO}]\n        [-geom={YES/NO/SUMMARY/WKT/ISO_WKT}] [--formats] [[-oo NAME=VALUE] ...]\n        [-nomd] [-listmdd] [-mdd domain|`all`]*\n        [-nocount] [-noextent] [-wkt_format WKT1|WKT2|...]\n        <datasource_name> [<layer> [<layer> ...]]",
    "parameters": [
      {
        "flag": null,
        "dataType": "String",
        "isOptional": false,
        "name": "datasource_name",
        "isInputFile": true,
        "explanation": "The data source to open. May be a filename, directory or other virtual\nname. See the OGR Vector Formats list for supported datasources. \n"
      }
    ],
    "options": [
      {
        "flag": "-ro",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "ro",
        "explanation": "Open the data source in read-only mode. \n"
      },
      {
        "flag": "-al",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "al",
        "explanation": "List all features of all layers (used instead of having to give layer names\nas arguments). \n"
      },
      {
        "flag": "-rl",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "rl",
        "explanation": "Enable random layer reading mode, i.e. iterate over features in the order\nthey are found in the dataset, and not layer per layer. This can be\nsignificantly faster for some formats (for example OSM, GMLAS). \n \n New in version 2.2. \n \n"
      },
      {
        "flag": "-so",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "so",
        "explanation": "Summary Only: suppress listing of individual features and show only\nsummary information like projection, schema, feature count and extents. \n"
      },
      {
        "flag": "-q",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "q",
        "explanation": "Quiet verbose reporting of various information, including coordinate\nsystem, layer schema, extents, and feature count. \n"
      },
      {
        "flag": "-where",
        "dataType": "String",
        "isOptional": true,
        "name": "restricted_where",
        "explanation": "An attribute query in a restricted form of the queries used in the SQL\n WHERE  statement. Only features matching the attribute query will be\nreported. Starting with GDAL 2.1, the  \\filename  syntax can be used to\nindicate that the content is in the pointed filename. \n"
      },
      {
        "flag": "-sql",
        "dataType": "String",
        "isOptional": true,
        "name": "sql statement",
        "explanation": "Execute the indicated SQL statement and return the result. Starting with\nGDAL 2.1, the  @filename  syntax can be used to indicate that the content is\nin the pointed filename. \n"
      },
      {
        "flag": "-dialect",
        "dataType": "String",
        "isOptional": true,
        "name": "dialect",
        "explanation": "SQL dialect. In some cases can be used to use (unoptimized) OGR SQL instead\nof the native SQL of an RDBMS by passing OGRSQL. The \u201cSQLITE\u201d dialect can\nalso be used with any datasource. \n"
      },
      {
        "flag": "-spat",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "<xmin> <ymin> <xmax> <ymax>",
        "name": "spat",
        "explanation": "The area of interest. Only features within the rectangle will be reported. \n"
      },
      {
        "flag": "-geomfield",
        "dataType": "String",
        "isOptional": true,
        "name": "field",
        "explanation": "Name of the geometry field on which the spatial filter operates. \n"
      },
      {
        "flag": "-fid",
        "dataType": "Integer",
        "isOptional": true,
        "name": "fid",
        "explanation": "If provided, only the feature with this feature id will be reported.\nOperates exclusive of the spatial or attribute queries. Note: if you want\nto select several features based on their feature id, you can also use the\nfact the \u2018fid\u2019 is a special field recognized by OGR SQL. So,  -where \u201cfid in (1,3,5)\u201d \nwould select features 1, 3 and 5. \n"
      },
      {
        "flag": "-fields",
        "dataType": "String",
        "isOptional": true,
        "available_values": [
          "YES",
          "NO"
        ],
        "name": "fields",
        "explanation": "If set to  NO , the feature dump will not display field values. Default value\nis  YES . \n"
      },
      {
        "flag": "-geom",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "YES|NO|SUMMARY|WKT|ISO_WKT",
        "available_values": [
          "YES",
          "NO",
          "SUMMARY",
          "WKT",
          "ISO_WKT"
        ],
        "name": "geom",
        "explanation": "If set to  NO , the feature dump will not display the geometry. If set to\n SUMMARY , only a summary of the geometry will be displayed. If set to\n YES  or  ISO_WKT , the geometry will be reported in full OGC WKT format.\nIf set to  WKT  the geometry will be reported in legacy  WKT . Default\nvalue is  YES . (WKT and  ISO_WKT  are available starting with GDAL 2.1,\nwhich also changes the default to ISO_WKT) \n"
      },
      {
        "flag": "-oo",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "NAME=VALUE",
        "name": "oo",
        "explanation": "Dataset open option (format-specific) \n"
      },
      {
        "flag": "-nomd",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "nomd",
        "explanation": "Suppress metadata printing. Some datasets may contain a lot of metadata\nstrings. \n"
      },
      {
        "flag": "-listmdd",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "listmdd",
        "explanation": "List all metadata domains available for the dataset. \n"
      },
      {
        "flag": "-mdd",
        "dataType": "String",
        "isOptional": true,
        "name": "domain",
        "explanation": "Report metadata for the specified domain.  all  can be used to report\nmetadata in all domains. \n"
      },
      {
        "flag": "-nocount",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "nocount",
        "explanation": "Suppress feature count printing. \n"
      },
      {
        "flag": "-noextent",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "noextent",
        "explanation": "Suppress spatial extent printing. \n"
      },
      {
        "flag": "--formats",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "formats",
        "explanation": "List the format drivers that are enabled. \n"
      },
      {
        "flag": "-wkt_format",
        "dataType": "String",
        "isOptional": true,
        "available_values": [
          "WKT1",
          "WKT2",
          "WKT2_2015",
          "WKT2_2018"
        ],
        "name": "format",
        "explanation": "The WKT format used to display the SRS.\nCurrently supported values for the  format  are: \n WKT1 \n WKT2  (latest WKT version, currently  WKT2_2018 ) \n WKT2_2015 \n WKT2_2018 \n \n New in version 3.0.0. \n \n"
      },
      {
        "flag": "layer",
        "dataType": "String",
        "isOptional": true,
        "name": "layer",
        "explanation": "One or more layer names may be reported.  If no layer names are passed then ogrinfo will report a list of available layers (and their layer wide\ngeometry type). If layer name(s) are given then their extents, coordinate\nsystem, feature count, geometry type, schema and all features matching\nquery parameters will be reported to the terminal. If no query parameters\nare provided, all features are reported. \n"
      }
    ],
    "manual_url": "https://gdal.org/programs/ogrinfo.html",
    "example": [
      "ogrinfo wrk/SHETLAND_ISLANDS.NTF",
      "ogrinfo -ro -where 'GLOBAL_LINK_ID=185878'  wrk/SHETLAND_ISLANDS.NTF BL2000_LINK"
    ]
  },
  {
    "name": "gdal_merge",
    "exec": "gdal_merge",
    "summary": "Mosaics a set of images.",
    "description": "This utility will automatically mosaic a set of images.  All the images must\nbe in the same coordinate system and have a matching number of bands, but\nthey may be overlapping, and at different resolutions. In areas of overlap,\nthe last image will be copied over earlier ones.",
    "syntax": "gdal_merge.py [-o out_filename] [-of out_format] [-co NAME=VALUE] * [-ps pixelsize_x pixelsize_y] [-tap] [-separate] [-q] [-v] [-pct] [-ul_lr ulx uly lrx lry] [-init \"value [value...]\"] [-n nodata_value] [-a_nodata output_nodata_value] [-ot datatype] [-createonly] input_files",
    "parameters": [
      {
        "flag": null,
        "dataType": "String",
        "isOptional": false,
        "name": "input_files",
        "isInputFile": true,
        "explanation": "input files"
      }
    ],
    "options": [
      {
        "flag": "-o",
        "dataType": "String",
        "isOptional": true,
        "name": "out_filename",
        "defaultValue": "out.tif",
        "explanation": "The name of the output file,\nwhich will be created if it does not already exist (defaults to \u201cout.tif\u201d). \n"
      },
      {
        "flag": "-of",
        "dataType": "String",
        "isOptional": true,
        "name": "format",
        "explanation": "Select the output format. Starting with GDAL 2.3, if not specified, the\nformat is guessed from the extension (previously was GTiff). Use the short\nformat name. \n"
      },
      {
        "flag": "-co",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "<NAME=VALUE>",
        "name": "creation options",
        "explanation": "Many formats have one or more optional creation options that can be\nused to control particulars about the file created. For instance,\nthe GeoTIFF driver supports creation options to control compression,\nand whether the file should be tiled. \n The creation options available vary by format driver, and some\nsimple formats have no creation options at all. A list of options\nsupported for a format can be listed with the\n \u2013formats \ncommand line option but the documentation for the format is the\ndefinitive source of information on driver creation options.\nSee  Raster drivers  format\nspecific documentation for legal creation options for each format. \n"
      },
      {
        "flag": "-ot",
        "dataType": "String",
        "isOptional": true,
        "name": "output type",
        "available_values": [
          "Byte",
          "Int16",
          "UInt16",
          "UInt32",
          "Int32",
          "Float32",
          "Float64",
          "CInt16",
          "CInt32",
          "CFloat32",
          "CFloat64"
        ],
        "explanation": "Force the output image bands to have a specific type. Use type names\n(i.e.  Byte ,  Int16 ,\u2026) \n"
      },
      {
        "flag": "-ps",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "<pixelsize_x> <pixelsize_y>",
        "name": "pixelsize",
        "explanation": "Pixel size to be used for the\noutput file.  If not specified the resolution of the first input file will\nbe used. \n"
      },
      {
        "flag": "-tap",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "tap",
        "explanation": "(target aligned pixels) align\nthe coordinates of the extent of the output file to the values of the -tr,\nsuch that the aligned extent includes the minimum extent. \n"
      },
      {
        "flag": "-ul_lr",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "<ulx> <uly> <lrx> <lry>",
        "name": "ul_lr",
        "explanation": "The extents of the output file.\nIf not specified the aggregate extents of all input files will be\nused. \n"
      },
      {
        "flag": "-v",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "v",
        "explanation": "Generate verbose output of mosaicing operations as they are done. \n"
      },
      {
        "flag": "-separate",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "separate",
        "explanation": "Place each input file into a separate band. \n"
      },
      {
        "flag": "-pct",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "pct",
        "explanation": "Grab a pseudo-color table from the first input image, and use it for the output.\nMerging pseudo-colored images this way assumes that all input files use the same\ncolor table. \n"
      },
      {
        "flag": "-n",
        "dataType": "Integer",
        "isOptional": true,
        "name": "nodata_value",
        "explanation": "Ignore pixels from files being merged in with this pixel value. \n"
      },
      {
        "flag": "-a_nodata",
        "dataType": "Integer",
        "isOptional": true,
        "name": "output_nodata_value",
        "explanation": "Assign a specified nodata value to output bands. \n"
      },
      {
        "flag": "-init",
        "dataType": "String",
        "isOptional": true,
        "name": "initialize values",
        "explanation": "Pre-initialize the output image bands with these values.  However, it is not\nmarked as the nodata value in the output file.  If only one value is given, the\nsame value is used in all the bands. \n"
      },
      {
        "flag": "-createonly",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "createonly",
        "explanation": "The output file is created (and potentially pre-initialized) but no input\nimage data is copied into it. \n"
      }
    ],
    "manual_url": "https://gdal.org/programs/gdal_merge.html",
    "example": [
      "gdal_merge.py -init 255 -o out.tif in1.tif in2.tif",
      "gdal_merge.py -init \"0 0 255\" -o out.tif in1.tif in2.tif"
    ]
  },
  {
    "name": "gdal_rasterize",
    "exec": "gdal_rasterize",
    "summary": "Burns vector geometries into a raster.",
    "description": "This program burns vector geometries (points, lines, and polygons) into the\nraster band(s) of a raster image.  Vectors are read from OGR supported vector\nformats. Note that on the fly reprojection of vector data to the coordinate system of the\nraster data is only supported since GDAL 2.1.0.",
    "syntax": "gdal_rasterize [-b band] * [-i] [-at] {[-burn value] * | [-a attribute_name] | [-3 d]} [-add] [-l layername] * [-where expression] [-sql select_statement] [-dialect dialect] [-of format] [-a_srs srs_def] [-to NAME=VALUE] * [-co \"NAME=VALUE\"] * [-a_nodata value] [-init value] * [-te xmin ymin xmax ymax] [-tr xres yres] [-tap] [-ts width height] [-ot { Byte / Int16 / UInt16 / UInt32 / Int32 / Float32 / Float64 / CInt16 / CInt32 / CFloat32 / CFloat64 }] [-q] src_datasource dst_filename",
    "parameters": [
      {
        "flag": null,
        "dataType": "String",
        "isOptional": false,
        "name": "src_datasource",
        "isInputFile": true,
        "explanation": "Any OGR supported readable datasource. \n"
      },
      {
        "flag": null,
        "dataType": "String",
        "isOptional": false,
        "name": "dst_filename",
        "isOutputFile": true,
        "explanation": "The GDAL supported output file.  Must support update mode access.\nThis file will be created (or overwritten if it already exists):option: -of ,\n -a_nodata ,  -init ,  -a_srs ,  -co ,  -te ,\n -tr ,  -tap ,  -ts , or  -ot  options are used. \n"
      }
    ],
    "options": [
      {
        "flag": "-b",
        "dataType": "Integer",
        "isOptional": true,
        "name": "band",
        "explanation": "The band(s) to burn values into.  Multiple -b arguments may be used to burn\ninto a list of bands.  The default is to burn into band 1.  Not used when\ncreating a new raster. \n"
      },
      {
        "flag": "-i",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "i",
        "explanation": "Invert rasterization.  Burn the fixed burn value, or the burn value associated\nwith the first feature into all parts of the image  not  inside the\nprovided polygon. \n"
      },
      {
        "flag": "-at",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "at",
        "explanation": "Enables the ALL_TOUCHED rasterization option so that all pixels touched\nby lines or polygons will be updated, not just those on the line render path,\nor whose center point is within the polygon.  Defaults to disabled for normal\nrendering rules. \n"
      },
      {
        "flag": "-burn",
        "dataType": "String",
        "isOptional": true,
        "name": "value",
        "explanation": "A fixed value to burn into a band for all objects.  A list of  -burn  options\ncan be supplied, one per band being written to. \n"
      },
      {
        "flag": "-a",
        "dataType": "String",
        "isOptional": true,
        "name": "attribute_name",
        "explanation": "Identifies an attribute field on the features to be used for a burn-in value.\nThe value will be burned into all output bands. \n"
      },
      {
        "flag": "-3d",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "3d",
        "explanation": "Indicates that a burn value should be extracted from the \u201cZ\u201d values of the\nfeature. Works with points and lines (linear interpolation along each segment).\nFor polygons, works properly only if the are flat (same Z value for all\nvertices). \n"
      },
      {
        "flag": "-add",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "add",
        "explanation": "Instead of burning a new value, this adds the new value to the existing raster.\nSuitable for heatmaps for instance. \n"
      },
      {
        "flag": "-l",
        "dataType": "String",
        "isOptional": true,
        "name": "layername",
        "explanation": "Indicates the layer(s) from the datasource that will be used for input\nfeatures.  May be specified multiple times, but at least one layer name or a\n -sql  option must be specified. \n"
      },
      {
        "flag": "-where",
        "dataType": "String",
        "isOptional": true,
        "name": "where expression",
        "explanation": "An optional SQL WHERE style query expression to be applied to select features\nto burn in from the input layer(s). \n"
      },
      {
        "flag": "-sql",
        "dataType": "String",
        "isOptional": true,
        "name": "select_statement",
        "explanation": "An SQL statement to be evaluated against the datasource to produce a\nvirtual layer of features to be burned in. \n"
      },
      {
        "flag": "-dialect",
        "dataType": "String",
        "isOptional": true,
        "name": "dialect",
        "explanation": "SQL dialect. In some cases can be used to use (unoptimized) OGR SQL instead of\nthe native SQL of an RDBMS by passing OGRSQL. The\n\u201cSQLITE\u201d dialect can also be used with any datasource. \n \n New in version 2.1. \n \n"
      },
      {
        "flag": "-of",
        "dataType": "String",
        "isOptional": true,
        "name": "format",
        "explanation": "Select the output format. Starting with GDAL 2.3, if not specified, the\nformat is guessed from the extension (previously was GTiff). Use the short\nformat name. \n"
      },
      {
        "flag": "-a_nodata",
        "dataType": "Integer",
        "isOptional": true,
        "name": "a_nodata value",
        "explanation": "Assign a specified nodata value to output bands. \n"
      },
      {
        "flag": "-init",
        "dataType": "String",
        "isOptional": true,
        "name": "init value",
        "explanation": "Pre-initialize the output image bands with these values.  However, it is not\nmarked as the nodata value in the output file.  If only one value is given, the\nsame value is used in all the bands. \n"
      },
      {
        "flag": "-a_srs",
        "dataType": "String",
        "isOptional": true,
        "name": "a_srs_def",
        "explanation": "Override the projection for the output file. If not specified, the projection of\nthe input vector file will be used if available. When using this option, no reprojection\nof features from the SRS of the input vector to the specified SRS of the output raster,\nso use only this option to correct an invalid source SRS.\nThe <srs_def> may be any of the usual GDAL/OGR forms, complete WKT, PROJ.4,\nEPSG:n or a file containing the WKT. \n"
      },
      {
        "flag": "-co",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "<NAME=VALUE>",
        "name": "creation option",
        "explanation": "Many formats have one or more optional creation options that can be\nused to control particulars about the file created. For instance,\nthe GeoTIFF driver supports creation options to control compression,\nand whether the file should be tiled. \n The creation options available vary by format driver, and some\nsimple formats have no creation options at all. A list of options\nsupported for a format can be listed with the\n \u2013formats \ncommand line option but the documentation for the format is the\ndefinitive source of information on driver creation options.\nSee  Raster drivers  format\nspecific documentation for legal creation options for each format. \n"
      },
      {
        "flag": "-te",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "<xmin> <ymin> <xmax> <ymax>",
        "name": "target extent",
        "explanation": "Set georeferenced extents. The values must be expressed in georeferenced units.\nIf not specified, the extent of the output file will be the extent of the vector\nlayers. \n"
      },
      {
        "flag": "-tr",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "<xres> <yres>",
        "name": "target resolution",
        "explanation": "Set target resolution. The values must be expressed in georeferenced units.\nBoth must be positive values. \n"
      },
      {
        "flag": "-tap",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "tap",
        "explanation": "(target aligned pixels) Align\nthe coordinates of the extent of the output file to the values of the  -tr ,\nsuch that the aligned extent includes the minimum extent. \n"
      },
      {
        "flag": "-ts",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "<width> <height>",
        "name": "target size",
        "explanation": "Set output file size in pixels and lines. Note that  -ts  cannot be used with\n -tr \n"
      },
      {
        "flag": "-ot",
        "dataType": "String",
        "isOptional": true,
        "available_values": [
          "Byte",
          "Int16",
          "UInt16",
          "UInt32",
          "Int32",
          "Float32",
          "Float64",
          "CInt16",
          "CInt32",
          "CFloat32",
          "CFloat64"
        ],
        "name": "output type",
        "explanation": "Force the output bands to be of the indicated data type. Defaults to  Float64 \n"
      },
      {
        "flag": "-q",
        "dataType": "Boolean",
        "isOptional": true,
        "name": "q",
        "explanation": "Suppress progress monitor and other non-error output. \n"
      },
      {
        "flag": "-to",
        "dataType": "String",
        "isOptional": true,
        "input_pattern": "NAME=VALUE",
        "name": "to",
        "explanation": "set a transformer\noption suitable to pass to  GDALCreateGenImgProjTransformer2() . This is\nused when converting geometries coordinates to target raster pixel space. For\nexample this can be used to specify RPC related transformer options. \n \n New in version 2.3. \n \n"
      }
    ],
    "manual_url": "https://gdal.org/programs/gdal_rasterize.html",
    "example": [
      "gdal_rasterize -b 1 -b 2 -b 3 -burn 255 -burn 0 -burn 0 -l mask mask.shp work.tif gdal_rasterize -a ROOF_H -where 'class=\"A\"' -l footprints footprints.shp city_dem.tif",
      "gdal_rasterize -burn 255 -burn 0 -burn 0 -ot Byte -ts 1000 1000 -l footprints footprints.shp mask.tif"
    ]
  }
]